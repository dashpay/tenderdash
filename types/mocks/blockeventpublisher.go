// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dashpay/tenderdash/types"
	mock "github.com/stretchr/testify/mock"
)

// NewBlockEventPublisher creates a new instance of BlockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockEventPublisher {
	mock := &BlockEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BlockEventPublisher is an autogenerated mock type for the BlockEventPublisher type
type BlockEventPublisher struct {
	mock.Mock
}

type BlockEventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockEventPublisher) EXPECT() *BlockEventPublisher_Expecter {
	return &BlockEventPublisher_Expecter{mock: &_m.Mock}
}

// PublishEventNewBlock provides a mock function for the type BlockEventPublisher
func (_mock *BlockEventPublisher) PublishEventNewBlock(eventDataNewBlock types.EventDataNewBlock) error {
	ret := _mock.Called(eventDataNewBlock)

	if len(ret) == 0 {
		panic("no return value specified for PublishEventNewBlock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.EventDataNewBlock) error); ok {
		r0 = returnFunc(eventDataNewBlock)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BlockEventPublisher_PublishEventNewBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishEventNewBlock'
type BlockEventPublisher_PublishEventNewBlock_Call struct {
	*mock.Call
}

// PublishEventNewBlock is a helper method to define mock.On call
//   - eventDataNewBlock types.EventDataNewBlock
func (_e *BlockEventPublisher_Expecter) PublishEventNewBlock(eventDataNewBlock interface{}) *BlockEventPublisher_PublishEventNewBlock_Call {
	return &BlockEventPublisher_PublishEventNewBlock_Call{Call: _e.mock.On("PublishEventNewBlock", eventDataNewBlock)}
}

func (_c *BlockEventPublisher_PublishEventNewBlock_Call) Run(run func(eventDataNewBlock types.EventDataNewBlock)) *BlockEventPublisher_PublishEventNewBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.EventDataNewBlock
		if args[0] != nil {
			arg0 = args[0].(types.EventDataNewBlock)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BlockEventPublisher_PublishEventNewBlock_Call) Return(err error) *BlockEventPublisher_PublishEventNewBlock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BlockEventPublisher_PublishEventNewBlock_Call) RunAndReturn(run func(eventDataNewBlock types.EventDataNewBlock) error) *BlockEventPublisher_PublishEventNewBlock_Call {
	_c.Call.Return(run)
	return _c
}

// PublishEventNewBlockHeader provides a mock function for the type BlockEventPublisher
func (_mock *BlockEventPublisher) PublishEventNewBlockHeader(eventDataNewBlockHeader types.EventDataNewBlockHeader) error {
	ret := _mock.Called(eventDataNewBlockHeader)

	if len(ret) == 0 {
		panic("no return value specified for PublishEventNewBlockHeader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.EventDataNewBlockHeader) error); ok {
		r0 = returnFunc(eventDataNewBlockHeader)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BlockEventPublisher_PublishEventNewBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishEventNewBlockHeader'
type BlockEventPublisher_PublishEventNewBlockHeader_Call struct {
	*mock.Call
}

// PublishEventNewBlockHeader is a helper method to define mock.On call
//   - eventDataNewBlockHeader types.EventDataNewBlockHeader
func (_e *BlockEventPublisher_Expecter) PublishEventNewBlockHeader(eventDataNewBlockHeader interface{}) *BlockEventPublisher_PublishEventNewBlockHeader_Call {
	return &BlockEventPublisher_PublishEventNewBlockHeader_Call{Call: _e.mock.On("PublishEventNewBlockHeader", eventDataNewBlockHeader)}
}

func (_c *BlockEventPublisher_PublishEventNewBlockHeader_Call) Run(run func(eventDataNewBlockHeader types.EventDataNewBlockHeader)) *BlockEventPublisher_PublishEventNewBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.EventDataNewBlockHeader
		if args[0] != nil {
			arg0 = args[0].(types.EventDataNewBlockHeader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BlockEventPublisher_PublishEventNewBlockHeader_Call) Return(err error) *BlockEventPublisher_PublishEventNewBlockHeader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BlockEventPublisher_PublishEventNewBlockHeader_Call) RunAndReturn(run func(eventDataNewBlockHeader types.EventDataNewBlockHeader) error) *BlockEventPublisher_PublishEventNewBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// PublishEventNewEvidence provides a mock function for the type BlockEventPublisher
func (_mock *BlockEventPublisher) PublishEventNewEvidence(eventDataNewEvidence types.EventDataNewEvidence) error {
	ret := _mock.Called(eventDataNewEvidence)

	if len(ret) == 0 {
		panic("no return value specified for PublishEventNewEvidence")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.EventDataNewEvidence) error); ok {
		r0 = returnFunc(eventDataNewEvidence)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BlockEventPublisher_PublishEventNewEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishEventNewEvidence'
type BlockEventPublisher_PublishEventNewEvidence_Call struct {
	*mock.Call
}

// PublishEventNewEvidence is a helper method to define mock.On call
//   - eventDataNewEvidence types.EventDataNewEvidence
func (_e *BlockEventPublisher_Expecter) PublishEventNewEvidence(eventDataNewEvidence interface{}) *BlockEventPublisher_PublishEventNewEvidence_Call {
	return &BlockEventPublisher_PublishEventNewEvidence_Call{Call: _e.mock.On("PublishEventNewEvidence", eventDataNewEvidence)}
}

func (_c *BlockEventPublisher_PublishEventNewEvidence_Call) Run(run func(eventDataNewEvidence types.EventDataNewEvidence)) *BlockEventPublisher_PublishEventNewEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.EventDataNewEvidence
		if args[0] != nil {
			arg0 = args[0].(types.EventDataNewEvidence)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BlockEventPublisher_PublishEventNewEvidence_Call) Return(err error) *BlockEventPublisher_PublishEventNewEvidence_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BlockEventPublisher_PublishEventNewEvidence_Call) RunAndReturn(run func(eventDataNewEvidence types.EventDataNewEvidence) error) *BlockEventPublisher_PublishEventNewEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// PublishEventTx provides a mock function for the type BlockEventPublisher
func (_mock *BlockEventPublisher) PublishEventTx(eventDataTx types.EventDataTx) error {
	ret := _mock.Called(eventDataTx)

	if len(ret) == 0 {
		panic("no return value specified for PublishEventTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.EventDataTx) error); ok {
		r0 = returnFunc(eventDataTx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BlockEventPublisher_PublishEventTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishEventTx'
type BlockEventPublisher_PublishEventTx_Call struct {
	*mock.Call
}

// PublishEventTx is a helper method to define mock.On call
//   - eventDataTx types.EventDataTx
func (_e *BlockEventPublisher_Expecter) PublishEventTx(eventDataTx interface{}) *BlockEventPublisher_PublishEventTx_Call {
	return &BlockEventPublisher_PublishEventTx_Call{Call: _e.mock.On("PublishEventTx", eventDataTx)}
}

func (_c *BlockEventPublisher_PublishEventTx_Call) Run(run func(eventDataTx types.EventDataTx)) *BlockEventPublisher_PublishEventTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.EventDataTx
		if args[0] != nil {
			arg0 = args[0].(types.EventDataTx)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BlockEventPublisher_PublishEventTx_Call) Return(err error) *BlockEventPublisher_PublishEventTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BlockEventPublisher_PublishEventTx_Call) RunAndReturn(run func(eventDataTx types.EventDataTx) error) *BlockEventPublisher_PublishEventTx_Call {
	_c.Call.Return(run)
	return _c
}

// PublishEventValidatorSetUpdates provides a mock function for the type BlockEventPublisher
func (_mock *BlockEventPublisher) PublishEventValidatorSetUpdates(eventDataValidatorSetUpdate types.EventDataValidatorSetUpdate) error {
	ret := _mock.Called(eventDataValidatorSetUpdate)

	if len(ret) == 0 {
		panic("no return value specified for PublishEventValidatorSetUpdates")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.EventDataValidatorSetUpdate) error); ok {
		r0 = returnFunc(eventDataValidatorSetUpdate)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BlockEventPublisher_PublishEventValidatorSetUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishEventValidatorSetUpdates'
type BlockEventPublisher_PublishEventValidatorSetUpdates_Call struct {
	*mock.Call
}

// PublishEventValidatorSetUpdates is a helper method to define mock.On call
//   - eventDataValidatorSetUpdate types.EventDataValidatorSetUpdate
func (_e *BlockEventPublisher_Expecter) PublishEventValidatorSetUpdates(eventDataValidatorSetUpdate interface{}) *BlockEventPublisher_PublishEventValidatorSetUpdates_Call {
	return &BlockEventPublisher_PublishEventValidatorSetUpdates_Call{Call: _e.mock.On("PublishEventValidatorSetUpdates", eventDataValidatorSetUpdate)}
}

func (_c *BlockEventPublisher_PublishEventValidatorSetUpdates_Call) Run(run func(eventDataValidatorSetUpdate types.EventDataValidatorSetUpdate)) *BlockEventPublisher_PublishEventValidatorSetUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.EventDataValidatorSetUpdate
		if args[0] != nil {
			arg0 = args[0].(types.EventDataValidatorSetUpdate)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BlockEventPublisher_PublishEventValidatorSetUpdates_Call) Return(err error) *BlockEventPublisher_PublishEventValidatorSetUpdates_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BlockEventPublisher_PublishEventValidatorSetUpdates_Call) RunAndReturn(run func(eventDataValidatorSetUpdate types.EventDataValidatorSetUpdate) error) *BlockEventPublisher_PublishEventValidatorSetUpdates_Call {
	_c.Call.Return(run)
	return _c
}
