// Code generated by metricsgen. DO NOT EDIT.

package abciclient

import (
	"github.com/go-kit/kit/metrics/discard"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	stdprometheus "github.com/prometheus/client_golang/prometheus"
)

func PrometheusMetrics(namespace string, labelsAndValues ...string) *Metrics {
	labels := []string{}
	for i := 0; i < len(labelsAndValues); i += 2 {
		labels = append(labels, labelsAndValues[i])
	}
	return &Metrics{
		PendingSendMessages: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "pending_send_messages",
			Help:      "Number of messages in ABCI Socket queue",
		}, append(labels, "message_type")).With(labelsAndValues...),
		SocketReceiveMessagesTotal: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "socket_receive_messages_total",
			Help:      "Number of messages received from ABCI Socket",
		}, append(labels, "message_type")).With(labelsAndValues...),
		SocketSendMessagesTotal: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "socket_send_messages_total",
			Help:      "Number of messages sent to ABCI Socket",
		}, append(labels, "message_type")).With(labelsAndValues...),
	}
}

func NopMetrics() *Metrics {
	return &Metrics{
		PendingSendMessages:        discard.NewGauge(),
		SocketReceiveMessagesTotal: discard.NewCounter(),
		SocketSendMessagesTotal:    discard.NewCounter(),
	}
}
