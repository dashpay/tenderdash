// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dashpay/tenderdash/abci/types"
	mock "github.com/stretchr/testify/mock"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// ApplySnapshotChunk provides a mock function for the type Client
func (_mock *Client) ApplySnapshotChunk(context1 context.Context, requestApplySnapshotChunk *types.RequestApplySnapshotChunk) (*types.ResponseApplySnapshotChunk, error) {
	ret := _mock.Called(context1, requestApplySnapshotChunk)

	if len(ret) == 0 {
		panic("no return value specified for ApplySnapshotChunk")
	}

	var r0 *types.ResponseApplySnapshotChunk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestApplySnapshotChunk) (*types.ResponseApplySnapshotChunk, error)); ok {
		return returnFunc(context1, requestApplySnapshotChunk)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestApplySnapshotChunk) *types.ResponseApplySnapshotChunk); ok {
		r0 = returnFunc(context1, requestApplySnapshotChunk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseApplySnapshotChunk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestApplySnapshotChunk) error); ok {
		r1 = returnFunc(context1, requestApplySnapshotChunk)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_ApplySnapshotChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplySnapshotChunk'
type Client_ApplySnapshotChunk_Call struct {
	*mock.Call
}

// ApplySnapshotChunk is a helper method to define mock.On call
//   - context1 context.Context
//   - requestApplySnapshotChunk *types.RequestApplySnapshotChunk
func (_e *Client_Expecter) ApplySnapshotChunk(context1 interface{}, requestApplySnapshotChunk interface{}) *Client_ApplySnapshotChunk_Call {
	return &Client_ApplySnapshotChunk_Call{Call: _e.mock.On("ApplySnapshotChunk", context1, requestApplySnapshotChunk)}
}

func (_c *Client_ApplySnapshotChunk_Call) Run(run func(context1 context.Context, requestApplySnapshotChunk *types.RequestApplySnapshotChunk)) *Client_ApplySnapshotChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestApplySnapshotChunk
		if args[1] != nil {
			arg1 = args[1].(*types.RequestApplySnapshotChunk)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_ApplySnapshotChunk_Call) Return(responseApplySnapshotChunk *types.ResponseApplySnapshotChunk, err error) *Client_ApplySnapshotChunk_Call {
	_c.Call.Return(responseApplySnapshotChunk, err)
	return _c
}

func (_c *Client_ApplySnapshotChunk_Call) RunAndReturn(run func(context1 context.Context, requestApplySnapshotChunk *types.RequestApplySnapshotChunk) (*types.ResponseApplySnapshotChunk, error)) *Client_ApplySnapshotChunk_Call {
	_c.Call.Return(run)
	return _c
}

// CheckTx provides a mock function for the type Client
func (_mock *Client) CheckTx(context1 context.Context, requestCheckTx *types.RequestCheckTx) (*types.ResponseCheckTx, error) {
	ret := _mock.Called(context1, requestCheckTx)

	if len(ret) == 0 {
		panic("no return value specified for CheckTx")
	}

	var r0 *types.ResponseCheckTx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestCheckTx) (*types.ResponseCheckTx, error)); ok {
		return returnFunc(context1, requestCheckTx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestCheckTx) *types.ResponseCheckTx); ok {
		r0 = returnFunc(context1, requestCheckTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseCheckTx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestCheckTx) error); ok {
		r1 = returnFunc(context1, requestCheckTx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CheckTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTx'
type Client_CheckTx_Call struct {
	*mock.Call
}

// CheckTx is a helper method to define mock.On call
//   - context1 context.Context
//   - requestCheckTx *types.RequestCheckTx
func (_e *Client_Expecter) CheckTx(context1 interface{}, requestCheckTx interface{}) *Client_CheckTx_Call {
	return &Client_CheckTx_Call{Call: _e.mock.On("CheckTx", context1, requestCheckTx)}
}

func (_c *Client_CheckTx_Call) Run(run func(context1 context.Context, requestCheckTx *types.RequestCheckTx)) *Client_CheckTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestCheckTx
		if args[1] != nil {
			arg1 = args[1].(*types.RequestCheckTx)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_CheckTx_Call) Return(responseCheckTx *types.ResponseCheckTx, err error) *Client_CheckTx_Call {
	_c.Call.Return(responseCheckTx, err)
	return _c
}

func (_c *Client_CheckTx_Call) RunAndReturn(run func(context1 context.Context, requestCheckTx *types.RequestCheckTx) (*types.ResponseCheckTx, error)) *Client_CheckTx_Call {
	_c.Call.Return(run)
	return _c
}

// Echo provides a mock function for the type Client
func (_mock *Client) Echo(context1 context.Context, s string) (*types.ResponseEcho, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Echo")
	}

	var r0 *types.ResponseEcho
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*types.ResponseEcho, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *types.ResponseEcho); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEcho)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_Echo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Echo'
type Client_Echo_Call struct {
	*mock.Call
}

// Echo is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *Client_Expecter) Echo(context1 interface{}, s interface{}) *Client_Echo_Call {
	return &Client_Echo_Call{Call: _e.mock.On("Echo", context1, s)}
}

func (_c *Client_Echo_Call) Run(run func(context1 context.Context, s string)) *Client_Echo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_Echo_Call) Return(responseEcho *types.ResponseEcho, err error) *Client_Echo_Call {
	_c.Call.Return(responseEcho, err)
	return _c
}

func (_c *Client_Echo_Call) RunAndReturn(run func(context1 context.Context, s string) (*types.ResponseEcho, error)) *Client_Echo_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function for the type Client
func (_mock *Client) Error() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Client_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *Client_Expecter) Error() *Client_Error_Call {
	return &Client_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *Client_Error_Call) Run(run func()) *Client_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Error_Call) Return(err error) *Client_Error_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_Error_Call) RunAndReturn(run func() error) *Client_Error_Call {
	_c.Call.Return(run)
	return _c
}

// ExtendVote provides a mock function for the type Client
func (_mock *Client) ExtendVote(context1 context.Context, requestExtendVote *types.RequestExtendVote) (*types.ResponseExtendVote, error) {
	ret := _mock.Called(context1, requestExtendVote)

	if len(ret) == 0 {
		panic("no return value specified for ExtendVote")
	}

	var r0 *types.ResponseExtendVote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestExtendVote) (*types.ResponseExtendVote, error)); ok {
		return returnFunc(context1, requestExtendVote)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestExtendVote) *types.ResponseExtendVote); ok {
		r0 = returnFunc(context1, requestExtendVote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseExtendVote)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestExtendVote) error); ok {
		r1 = returnFunc(context1, requestExtendVote)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_ExtendVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtendVote'
type Client_ExtendVote_Call struct {
	*mock.Call
}

// ExtendVote is a helper method to define mock.On call
//   - context1 context.Context
//   - requestExtendVote *types.RequestExtendVote
func (_e *Client_Expecter) ExtendVote(context1 interface{}, requestExtendVote interface{}) *Client_ExtendVote_Call {
	return &Client_ExtendVote_Call{Call: _e.mock.On("ExtendVote", context1, requestExtendVote)}
}

func (_c *Client_ExtendVote_Call) Run(run func(context1 context.Context, requestExtendVote *types.RequestExtendVote)) *Client_ExtendVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestExtendVote
		if args[1] != nil {
			arg1 = args[1].(*types.RequestExtendVote)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_ExtendVote_Call) Return(responseExtendVote *types.ResponseExtendVote, err error) *Client_ExtendVote_Call {
	_c.Call.Return(responseExtendVote, err)
	return _c
}

func (_c *Client_ExtendVote_Call) RunAndReturn(run func(context1 context.Context, requestExtendVote *types.RequestExtendVote) (*types.ResponseExtendVote, error)) *Client_ExtendVote_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeBlock provides a mock function for the type Client
func (_mock *Client) FinalizeBlock(context1 context.Context, requestFinalizeBlock *types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error) {
	ret := _mock.Called(context1, requestFinalizeBlock)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeBlock")
	}

	var r0 *types.ResponseFinalizeBlock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error)); ok {
		return returnFunc(context1, requestFinalizeBlock)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestFinalizeBlock) *types.ResponseFinalizeBlock); ok {
		r0 = returnFunc(context1, requestFinalizeBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseFinalizeBlock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestFinalizeBlock) error); ok {
		r1 = returnFunc(context1, requestFinalizeBlock)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_FinalizeBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeBlock'
type Client_FinalizeBlock_Call struct {
	*mock.Call
}

// FinalizeBlock is a helper method to define mock.On call
//   - context1 context.Context
//   - requestFinalizeBlock *types.RequestFinalizeBlock
func (_e *Client_Expecter) FinalizeBlock(context1 interface{}, requestFinalizeBlock interface{}) *Client_FinalizeBlock_Call {
	return &Client_FinalizeBlock_Call{Call: _e.mock.On("FinalizeBlock", context1, requestFinalizeBlock)}
}

func (_c *Client_FinalizeBlock_Call) Run(run func(context1 context.Context, requestFinalizeBlock *types.RequestFinalizeBlock)) *Client_FinalizeBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestFinalizeBlock
		if args[1] != nil {
			arg1 = args[1].(*types.RequestFinalizeBlock)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_FinalizeBlock_Call) Return(responseFinalizeBlock *types.ResponseFinalizeBlock, err error) *Client_FinalizeBlock_Call {
	_c.Call.Return(responseFinalizeBlock, err)
	return _c
}

func (_c *Client_FinalizeBlock_Call) RunAndReturn(run func(context1 context.Context, requestFinalizeBlock *types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error)) *Client_FinalizeBlock_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function for the type Client
func (_mock *Client) Flush(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type Client_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Client_Expecter) Flush(context1 interface{}) *Client_Flush_Call {
	return &Client_Flush_Call{Call: _e.mock.On("Flush", context1)}
}

func (_c *Client_Flush_Call) Run(run func(context1 context.Context)) *Client_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_Flush_Call) Return(err error) *Client_Flush_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_Flush_Call) RunAndReturn(run func(context1 context.Context) error) *Client_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type Client
func (_mock *Client) Info(context1 context.Context, requestInfo *types.RequestInfo) (*types.ResponseInfo, error) {
	ret := _mock.Called(context1, requestInfo)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *types.ResponseInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestInfo) (*types.ResponseInfo, error)); ok {
		return returnFunc(context1, requestInfo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestInfo) *types.ResponseInfo); ok {
		r0 = returnFunc(context1, requestInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestInfo) error); ok {
		r1 = returnFunc(context1, requestInfo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Client_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - context1 context.Context
//   - requestInfo *types.RequestInfo
func (_e *Client_Expecter) Info(context1 interface{}, requestInfo interface{}) *Client_Info_Call {
	return &Client_Info_Call{Call: _e.mock.On("Info", context1, requestInfo)}
}

func (_c *Client_Info_Call) Run(run func(context1 context.Context, requestInfo *types.RequestInfo)) *Client_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestInfo
		if args[1] != nil {
			arg1 = args[1].(*types.RequestInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_Info_Call) Return(responseInfo *types.ResponseInfo, err error) *Client_Info_Call {
	_c.Call.Return(responseInfo, err)
	return _c
}

func (_c *Client_Info_Call) RunAndReturn(run func(context1 context.Context, requestInfo *types.RequestInfo) (*types.ResponseInfo, error)) *Client_Info_Call {
	_c.Call.Return(run)
	return _c
}

// InitChain provides a mock function for the type Client
func (_mock *Client) InitChain(context1 context.Context, requestInitChain *types.RequestInitChain) (*types.ResponseInitChain, error) {
	ret := _mock.Called(context1, requestInitChain)

	if len(ret) == 0 {
		panic("no return value specified for InitChain")
	}

	var r0 *types.ResponseInitChain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestInitChain) (*types.ResponseInitChain, error)); ok {
		return returnFunc(context1, requestInitChain)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestInitChain) *types.ResponseInitChain); ok {
		r0 = returnFunc(context1, requestInitChain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseInitChain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestInitChain) error); ok {
		r1 = returnFunc(context1, requestInitChain)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_InitChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitChain'
type Client_InitChain_Call struct {
	*mock.Call
}

// InitChain is a helper method to define mock.On call
//   - context1 context.Context
//   - requestInitChain *types.RequestInitChain
func (_e *Client_Expecter) InitChain(context1 interface{}, requestInitChain interface{}) *Client_InitChain_Call {
	return &Client_InitChain_Call{Call: _e.mock.On("InitChain", context1, requestInitChain)}
}

func (_c *Client_InitChain_Call) Run(run func(context1 context.Context, requestInitChain *types.RequestInitChain)) *Client_InitChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestInitChain
		if args[1] != nil {
			arg1 = args[1].(*types.RequestInitChain)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_InitChain_Call) Return(responseInitChain *types.ResponseInitChain, err error) *Client_InitChain_Call {
	_c.Call.Return(responseInitChain, err)
	return _c
}

func (_c *Client_InitChain_Call) RunAndReturn(run func(context1 context.Context, requestInitChain *types.RequestInitChain) (*types.ResponseInitChain, error)) *Client_InitChain_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function for the type Client
func (_mock *Client) IsRunning() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Client_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type Client_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *Client_Expecter) IsRunning() *Client_IsRunning_Call {
	return &Client_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *Client_IsRunning_Call) Run(run func()) *Client_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_IsRunning_Call) Return(b bool) *Client_IsRunning_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Client_IsRunning_Call) RunAndReturn(run func() bool) *Client_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// ListSnapshots provides a mock function for the type Client
func (_mock *Client) ListSnapshots(context1 context.Context, requestListSnapshots *types.RequestListSnapshots) (*types.ResponseListSnapshots, error) {
	ret := _mock.Called(context1, requestListSnapshots)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 *types.ResponseListSnapshots
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestListSnapshots) (*types.ResponseListSnapshots, error)); ok {
		return returnFunc(context1, requestListSnapshots)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestListSnapshots) *types.ResponseListSnapshots); ok {
		r0 = returnFunc(context1, requestListSnapshots)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseListSnapshots)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestListSnapshots) error); ok {
		r1 = returnFunc(context1, requestListSnapshots)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_ListSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSnapshots'
type Client_ListSnapshots_Call struct {
	*mock.Call
}

// ListSnapshots is a helper method to define mock.On call
//   - context1 context.Context
//   - requestListSnapshots *types.RequestListSnapshots
func (_e *Client_Expecter) ListSnapshots(context1 interface{}, requestListSnapshots interface{}) *Client_ListSnapshots_Call {
	return &Client_ListSnapshots_Call{Call: _e.mock.On("ListSnapshots", context1, requestListSnapshots)}
}

func (_c *Client_ListSnapshots_Call) Run(run func(context1 context.Context, requestListSnapshots *types.RequestListSnapshots)) *Client_ListSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestListSnapshots
		if args[1] != nil {
			arg1 = args[1].(*types.RequestListSnapshots)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_ListSnapshots_Call) Return(responseListSnapshots *types.ResponseListSnapshots, err error) *Client_ListSnapshots_Call {
	_c.Call.Return(responseListSnapshots, err)
	return _c
}

func (_c *Client_ListSnapshots_Call) RunAndReturn(run func(context1 context.Context, requestListSnapshots *types.RequestListSnapshots) (*types.ResponseListSnapshots, error)) *Client_ListSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSnapshotChunk provides a mock function for the type Client
func (_mock *Client) LoadSnapshotChunk(context1 context.Context, requestLoadSnapshotChunk *types.RequestLoadSnapshotChunk) (*types.ResponseLoadSnapshotChunk, error) {
	ret := _mock.Called(context1, requestLoadSnapshotChunk)

	if len(ret) == 0 {
		panic("no return value specified for LoadSnapshotChunk")
	}

	var r0 *types.ResponseLoadSnapshotChunk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestLoadSnapshotChunk) (*types.ResponseLoadSnapshotChunk, error)); ok {
		return returnFunc(context1, requestLoadSnapshotChunk)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestLoadSnapshotChunk) *types.ResponseLoadSnapshotChunk); ok {
		r0 = returnFunc(context1, requestLoadSnapshotChunk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseLoadSnapshotChunk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestLoadSnapshotChunk) error); ok {
		r1 = returnFunc(context1, requestLoadSnapshotChunk)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_LoadSnapshotChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSnapshotChunk'
type Client_LoadSnapshotChunk_Call struct {
	*mock.Call
}

// LoadSnapshotChunk is a helper method to define mock.On call
//   - context1 context.Context
//   - requestLoadSnapshotChunk *types.RequestLoadSnapshotChunk
func (_e *Client_Expecter) LoadSnapshotChunk(context1 interface{}, requestLoadSnapshotChunk interface{}) *Client_LoadSnapshotChunk_Call {
	return &Client_LoadSnapshotChunk_Call{Call: _e.mock.On("LoadSnapshotChunk", context1, requestLoadSnapshotChunk)}
}

func (_c *Client_LoadSnapshotChunk_Call) Run(run func(context1 context.Context, requestLoadSnapshotChunk *types.RequestLoadSnapshotChunk)) *Client_LoadSnapshotChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestLoadSnapshotChunk
		if args[1] != nil {
			arg1 = args[1].(*types.RequestLoadSnapshotChunk)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_LoadSnapshotChunk_Call) Return(responseLoadSnapshotChunk *types.ResponseLoadSnapshotChunk, err error) *Client_LoadSnapshotChunk_Call {
	_c.Call.Return(responseLoadSnapshotChunk, err)
	return _c
}

func (_c *Client_LoadSnapshotChunk_Call) RunAndReturn(run func(context1 context.Context, requestLoadSnapshotChunk *types.RequestLoadSnapshotChunk) (*types.ResponseLoadSnapshotChunk, error)) *Client_LoadSnapshotChunk_Call {
	_c.Call.Return(run)
	return _c
}

// OfferSnapshot provides a mock function for the type Client
func (_mock *Client) OfferSnapshot(context1 context.Context, requestOfferSnapshot *types.RequestOfferSnapshot) (*types.ResponseOfferSnapshot, error) {
	ret := _mock.Called(context1, requestOfferSnapshot)

	if len(ret) == 0 {
		panic("no return value specified for OfferSnapshot")
	}

	var r0 *types.ResponseOfferSnapshot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestOfferSnapshot) (*types.ResponseOfferSnapshot, error)); ok {
		return returnFunc(context1, requestOfferSnapshot)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestOfferSnapshot) *types.ResponseOfferSnapshot); ok {
		r0 = returnFunc(context1, requestOfferSnapshot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseOfferSnapshot)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestOfferSnapshot) error); ok {
		r1 = returnFunc(context1, requestOfferSnapshot)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_OfferSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OfferSnapshot'
type Client_OfferSnapshot_Call struct {
	*mock.Call
}

// OfferSnapshot is a helper method to define mock.On call
//   - context1 context.Context
//   - requestOfferSnapshot *types.RequestOfferSnapshot
func (_e *Client_Expecter) OfferSnapshot(context1 interface{}, requestOfferSnapshot interface{}) *Client_OfferSnapshot_Call {
	return &Client_OfferSnapshot_Call{Call: _e.mock.On("OfferSnapshot", context1, requestOfferSnapshot)}
}

func (_c *Client_OfferSnapshot_Call) Run(run func(context1 context.Context, requestOfferSnapshot *types.RequestOfferSnapshot)) *Client_OfferSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestOfferSnapshot
		if args[1] != nil {
			arg1 = args[1].(*types.RequestOfferSnapshot)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_OfferSnapshot_Call) Return(responseOfferSnapshot *types.ResponseOfferSnapshot, err error) *Client_OfferSnapshot_Call {
	_c.Call.Return(responseOfferSnapshot, err)
	return _c
}

func (_c *Client_OfferSnapshot_Call) RunAndReturn(run func(context1 context.Context, requestOfferSnapshot *types.RequestOfferSnapshot) (*types.ResponseOfferSnapshot, error)) *Client_OfferSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareProposal provides a mock function for the type Client
func (_mock *Client) PrepareProposal(context1 context.Context, requestPrepareProposal *types.RequestPrepareProposal) (*types.ResponsePrepareProposal, error) {
	ret := _mock.Called(context1, requestPrepareProposal)

	if len(ret) == 0 {
		panic("no return value specified for PrepareProposal")
	}

	var r0 *types.ResponsePrepareProposal
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestPrepareProposal) (*types.ResponsePrepareProposal, error)); ok {
		return returnFunc(context1, requestPrepareProposal)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestPrepareProposal) *types.ResponsePrepareProposal); ok {
		r0 = returnFunc(context1, requestPrepareProposal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponsePrepareProposal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestPrepareProposal) error); ok {
		r1 = returnFunc(context1, requestPrepareProposal)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_PrepareProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareProposal'
type Client_PrepareProposal_Call struct {
	*mock.Call
}

// PrepareProposal is a helper method to define mock.On call
//   - context1 context.Context
//   - requestPrepareProposal *types.RequestPrepareProposal
func (_e *Client_Expecter) PrepareProposal(context1 interface{}, requestPrepareProposal interface{}) *Client_PrepareProposal_Call {
	return &Client_PrepareProposal_Call{Call: _e.mock.On("PrepareProposal", context1, requestPrepareProposal)}
}

func (_c *Client_PrepareProposal_Call) Run(run func(context1 context.Context, requestPrepareProposal *types.RequestPrepareProposal)) *Client_PrepareProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestPrepareProposal
		if args[1] != nil {
			arg1 = args[1].(*types.RequestPrepareProposal)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_PrepareProposal_Call) Return(responsePrepareProposal *types.ResponsePrepareProposal, err error) *Client_PrepareProposal_Call {
	_c.Call.Return(responsePrepareProposal, err)
	return _c
}

func (_c *Client_PrepareProposal_Call) RunAndReturn(run func(context1 context.Context, requestPrepareProposal *types.RequestPrepareProposal) (*types.ResponsePrepareProposal, error)) *Client_PrepareProposal_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessProposal provides a mock function for the type Client
func (_mock *Client) ProcessProposal(context1 context.Context, requestProcessProposal *types.RequestProcessProposal) (*types.ResponseProcessProposal, error) {
	ret := _mock.Called(context1, requestProcessProposal)

	if len(ret) == 0 {
		panic("no return value specified for ProcessProposal")
	}

	var r0 *types.ResponseProcessProposal
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestProcessProposal) (*types.ResponseProcessProposal, error)); ok {
		return returnFunc(context1, requestProcessProposal)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestProcessProposal) *types.ResponseProcessProposal); ok {
		r0 = returnFunc(context1, requestProcessProposal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseProcessProposal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestProcessProposal) error); ok {
		r1 = returnFunc(context1, requestProcessProposal)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_ProcessProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessProposal'
type Client_ProcessProposal_Call struct {
	*mock.Call
}

// ProcessProposal is a helper method to define mock.On call
//   - context1 context.Context
//   - requestProcessProposal *types.RequestProcessProposal
func (_e *Client_Expecter) ProcessProposal(context1 interface{}, requestProcessProposal interface{}) *Client_ProcessProposal_Call {
	return &Client_ProcessProposal_Call{Call: _e.mock.On("ProcessProposal", context1, requestProcessProposal)}
}

func (_c *Client_ProcessProposal_Call) Run(run func(context1 context.Context, requestProcessProposal *types.RequestProcessProposal)) *Client_ProcessProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestProcessProposal
		if args[1] != nil {
			arg1 = args[1].(*types.RequestProcessProposal)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_ProcessProposal_Call) Return(responseProcessProposal *types.ResponseProcessProposal, err error) *Client_ProcessProposal_Call {
	_c.Call.Return(responseProcessProposal, err)
	return _c
}

func (_c *Client_ProcessProposal_Call) RunAndReturn(run func(context1 context.Context, requestProcessProposal *types.RequestProcessProposal) (*types.ResponseProcessProposal, error)) *Client_ProcessProposal_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type Client
func (_mock *Client) Query(context1 context.Context, requestQuery *types.RequestQuery) (*types.ResponseQuery, error) {
	ret := _mock.Called(context1, requestQuery)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *types.ResponseQuery
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestQuery) (*types.ResponseQuery, error)); ok {
		return returnFunc(context1, requestQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestQuery) *types.ResponseQuery); ok {
		r0 = returnFunc(context1, requestQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseQuery)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestQuery) error); ok {
		r1 = returnFunc(context1, requestQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Client_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - context1 context.Context
//   - requestQuery *types.RequestQuery
func (_e *Client_Expecter) Query(context1 interface{}, requestQuery interface{}) *Client_Query_Call {
	return &Client_Query_Call{Call: _e.mock.On("Query", context1, requestQuery)}
}

func (_c *Client_Query_Call) Run(run func(context1 context.Context, requestQuery *types.RequestQuery)) *Client_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestQuery
		if args[1] != nil {
			arg1 = args[1].(*types.RequestQuery)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_Query_Call) Return(responseQuery *types.ResponseQuery, err error) *Client_Query_Call {
	_c.Call.Return(responseQuery, err)
	return _c
}

func (_c *Client_Query_Call) RunAndReturn(run func(context1 context.Context, requestQuery *types.RequestQuery) (*types.ResponseQuery, error)) *Client_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type Client
func (_mock *Client) Start(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Client_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Client_Expecter) Start(context1 interface{}) *Client_Start_Call {
	return &Client_Start_Call{Call: _e.mock.On("Start", context1)}
}

func (_c *Client_Start_Call) Run(run func(context1 context.Context)) *Client_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_Start_Call) Return(err error) *Client_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_Start_Call) RunAndReturn(run func(context1 context.Context) error) *Client_Start_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyVoteExtension provides a mock function for the type Client
func (_mock *Client) VerifyVoteExtension(context1 context.Context, requestVerifyVoteExtension *types.RequestVerifyVoteExtension) (*types.ResponseVerifyVoteExtension, error) {
	ret := _mock.Called(context1, requestVerifyVoteExtension)

	if len(ret) == 0 {
		panic("no return value specified for VerifyVoteExtension")
	}

	var r0 *types.ResponseVerifyVoteExtension
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestVerifyVoteExtension) (*types.ResponseVerifyVoteExtension, error)); ok {
		return returnFunc(context1, requestVerifyVoteExtension)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestVerifyVoteExtension) *types.ResponseVerifyVoteExtension); ok {
		r0 = returnFunc(context1, requestVerifyVoteExtension)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseVerifyVoteExtension)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestVerifyVoteExtension) error); ok {
		r1 = returnFunc(context1, requestVerifyVoteExtension)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_VerifyVoteExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyVoteExtension'
type Client_VerifyVoteExtension_Call struct {
	*mock.Call
}

// VerifyVoteExtension is a helper method to define mock.On call
//   - context1 context.Context
//   - requestVerifyVoteExtension *types.RequestVerifyVoteExtension
func (_e *Client_Expecter) VerifyVoteExtension(context1 interface{}, requestVerifyVoteExtension interface{}) *Client_VerifyVoteExtension_Call {
	return &Client_VerifyVoteExtension_Call{Call: _e.mock.On("VerifyVoteExtension", context1, requestVerifyVoteExtension)}
}

func (_c *Client_VerifyVoteExtension_Call) Run(run func(context1 context.Context, requestVerifyVoteExtension *types.RequestVerifyVoteExtension)) *Client_VerifyVoteExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.RequestVerifyVoteExtension
		if args[1] != nil {
			arg1 = args[1].(*types.RequestVerifyVoteExtension)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_VerifyVoteExtension_Call) Return(responseVerifyVoteExtension *types.ResponseVerifyVoteExtension, err error) *Client_VerifyVoteExtension_Call {
	_c.Call.Return(responseVerifyVoteExtension, err)
	return _c
}

func (_c *Client_VerifyVoteExtension_Call) RunAndReturn(run func(context1 context.Context, requestVerifyVoteExtension *types.RequestVerifyVoteExtension) (*types.ResponseVerifyVoteExtension, error)) *Client_VerifyVoteExtension_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function for the type Client
func (_mock *Client) Wait() {
	_mock.Called()
	return
}

// Client_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type Client_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *Client_Expecter) Wait() *Client_Wait_Call {
	return &Client_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *Client_Wait_Call) Run(run func()) *Client_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Wait_Call) Return() *Client_Wait_Call {
	_c.Call.Return()
	return _c
}

func (_c *Client_Wait_Call) RunAndReturn(run func()) *Client_Wait_Call {
	_c.Run(run)
	return _c
}
