// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dashpay/tenderdash/abci/types"
	mock "github.com/stretchr/testify/mock"
)

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

type Application_Expecter struct {
	mock *mock.Mock
}

func (_m *Application) EXPECT() *Application_Expecter {
	return &Application_Expecter{mock: &_m.Mock}
}

// ApplySnapshotChunk provides a mock function for the type Application
func (_mock *Application) ApplySnapshotChunk(context1 context.Context, requestApplySnapshotChunk *types.RequestApplySnapshotChunk) (*types.ResponseApplySnapshotChunk, error) {
	ret := _mock.Called(context1, requestApplySnapshotChunk)

	if len(ret) == 0 {
		panic("no return value specified for ApplySnapshotChunk")
	}

	var r0 *types.ResponseApplySnapshotChunk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestApplySnapshotChunk) (*types.ResponseApplySnapshotChunk, error)); ok {
		return returnFunc(context1, requestApplySnapshotChunk)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestApplySnapshotChunk) *types.ResponseApplySnapshotChunk); ok {
		r0 = returnFunc(context1, requestApplySnapshotChunk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseApplySnapshotChunk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestApplySnapshotChunk) error); ok {
		r1 = returnFunc(context1, requestApplySnapshotChunk)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_ApplySnapshotChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplySnapshotChunk'
type Application_ApplySnapshotChunk_Call struct {
	*mock.Call
}

// ApplySnapshotChunk is a helper method to define mock.On call
//   - context1
//   - requestApplySnapshotChunk
func (_e *Application_Expecter) ApplySnapshotChunk(context1 interface{}, requestApplySnapshotChunk interface{}) *Application_ApplySnapshotChunk_Call {
	return &Application_ApplySnapshotChunk_Call{Call: _e.mock.On("ApplySnapshotChunk", context1, requestApplySnapshotChunk)}
}

func (_c *Application_ApplySnapshotChunk_Call) Run(run func(context1 context.Context, requestApplySnapshotChunk *types.RequestApplySnapshotChunk)) *Application_ApplySnapshotChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestApplySnapshotChunk))
	})
	return _c
}

func (_c *Application_ApplySnapshotChunk_Call) Return(responseApplySnapshotChunk *types.ResponseApplySnapshotChunk, err error) *Application_ApplySnapshotChunk_Call {
	_c.Call.Return(responseApplySnapshotChunk, err)
	return _c
}

func (_c *Application_ApplySnapshotChunk_Call) RunAndReturn(run func(context1 context.Context, requestApplySnapshotChunk *types.RequestApplySnapshotChunk) (*types.ResponseApplySnapshotChunk, error)) *Application_ApplySnapshotChunk_Call {
	_c.Call.Return(run)
	return _c
}

// CheckTx provides a mock function for the type Application
func (_mock *Application) CheckTx(context1 context.Context, requestCheckTx *types.RequestCheckTx) (*types.ResponseCheckTx, error) {
	ret := _mock.Called(context1, requestCheckTx)

	if len(ret) == 0 {
		panic("no return value specified for CheckTx")
	}

	var r0 *types.ResponseCheckTx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestCheckTx) (*types.ResponseCheckTx, error)); ok {
		return returnFunc(context1, requestCheckTx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestCheckTx) *types.ResponseCheckTx); ok {
		r0 = returnFunc(context1, requestCheckTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseCheckTx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestCheckTx) error); ok {
		r1 = returnFunc(context1, requestCheckTx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_CheckTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTx'
type Application_CheckTx_Call struct {
	*mock.Call
}

// CheckTx is a helper method to define mock.On call
//   - context1
//   - requestCheckTx
func (_e *Application_Expecter) CheckTx(context1 interface{}, requestCheckTx interface{}) *Application_CheckTx_Call {
	return &Application_CheckTx_Call{Call: _e.mock.On("CheckTx", context1, requestCheckTx)}
}

func (_c *Application_CheckTx_Call) Run(run func(context1 context.Context, requestCheckTx *types.RequestCheckTx)) *Application_CheckTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestCheckTx))
	})
	return _c
}

func (_c *Application_CheckTx_Call) Return(responseCheckTx *types.ResponseCheckTx, err error) *Application_CheckTx_Call {
	_c.Call.Return(responseCheckTx, err)
	return _c
}

func (_c *Application_CheckTx_Call) RunAndReturn(run func(context1 context.Context, requestCheckTx *types.RequestCheckTx) (*types.ResponseCheckTx, error)) *Application_CheckTx_Call {
	_c.Call.Return(run)
	return _c
}

// ExtendVote provides a mock function for the type Application
func (_mock *Application) ExtendVote(context1 context.Context, requestExtendVote *types.RequestExtendVote) (*types.ResponseExtendVote, error) {
	ret := _mock.Called(context1, requestExtendVote)

	if len(ret) == 0 {
		panic("no return value specified for ExtendVote")
	}

	var r0 *types.ResponseExtendVote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestExtendVote) (*types.ResponseExtendVote, error)); ok {
		return returnFunc(context1, requestExtendVote)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestExtendVote) *types.ResponseExtendVote); ok {
		r0 = returnFunc(context1, requestExtendVote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseExtendVote)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestExtendVote) error); ok {
		r1 = returnFunc(context1, requestExtendVote)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_ExtendVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtendVote'
type Application_ExtendVote_Call struct {
	*mock.Call
}

// ExtendVote is a helper method to define mock.On call
//   - context1
//   - requestExtendVote
func (_e *Application_Expecter) ExtendVote(context1 interface{}, requestExtendVote interface{}) *Application_ExtendVote_Call {
	return &Application_ExtendVote_Call{Call: _e.mock.On("ExtendVote", context1, requestExtendVote)}
}

func (_c *Application_ExtendVote_Call) Run(run func(context1 context.Context, requestExtendVote *types.RequestExtendVote)) *Application_ExtendVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestExtendVote))
	})
	return _c
}

func (_c *Application_ExtendVote_Call) Return(responseExtendVote *types.ResponseExtendVote, err error) *Application_ExtendVote_Call {
	_c.Call.Return(responseExtendVote, err)
	return _c
}

func (_c *Application_ExtendVote_Call) RunAndReturn(run func(context1 context.Context, requestExtendVote *types.RequestExtendVote) (*types.ResponseExtendVote, error)) *Application_ExtendVote_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeBlock provides a mock function for the type Application
func (_mock *Application) FinalizeBlock(context1 context.Context, requestFinalizeBlock *types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error) {
	ret := _mock.Called(context1, requestFinalizeBlock)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeBlock")
	}

	var r0 *types.ResponseFinalizeBlock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error)); ok {
		return returnFunc(context1, requestFinalizeBlock)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestFinalizeBlock) *types.ResponseFinalizeBlock); ok {
		r0 = returnFunc(context1, requestFinalizeBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseFinalizeBlock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestFinalizeBlock) error); ok {
		r1 = returnFunc(context1, requestFinalizeBlock)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_FinalizeBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeBlock'
type Application_FinalizeBlock_Call struct {
	*mock.Call
}

// FinalizeBlock is a helper method to define mock.On call
//   - context1
//   - requestFinalizeBlock
func (_e *Application_Expecter) FinalizeBlock(context1 interface{}, requestFinalizeBlock interface{}) *Application_FinalizeBlock_Call {
	return &Application_FinalizeBlock_Call{Call: _e.mock.On("FinalizeBlock", context1, requestFinalizeBlock)}
}

func (_c *Application_FinalizeBlock_Call) Run(run func(context1 context.Context, requestFinalizeBlock *types.RequestFinalizeBlock)) *Application_FinalizeBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestFinalizeBlock))
	})
	return _c
}

func (_c *Application_FinalizeBlock_Call) Return(responseFinalizeBlock *types.ResponseFinalizeBlock, err error) *Application_FinalizeBlock_Call {
	_c.Call.Return(responseFinalizeBlock, err)
	return _c
}

func (_c *Application_FinalizeBlock_Call) RunAndReturn(run func(context1 context.Context, requestFinalizeBlock *types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error)) *Application_FinalizeBlock_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type Application
func (_mock *Application) Info(context1 context.Context, requestInfo *types.RequestInfo) (*types.ResponseInfo, error) {
	ret := _mock.Called(context1, requestInfo)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *types.ResponseInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestInfo) (*types.ResponseInfo, error)); ok {
		return returnFunc(context1, requestInfo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestInfo) *types.ResponseInfo); ok {
		r0 = returnFunc(context1, requestInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestInfo) error); ok {
		r1 = returnFunc(context1, requestInfo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Application_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - context1
//   - requestInfo
func (_e *Application_Expecter) Info(context1 interface{}, requestInfo interface{}) *Application_Info_Call {
	return &Application_Info_Call{Call: _e.mock.On("Info", context1, requestInfo)}
}

func (_c *Application_Info_Call) Run(run func(context1 context.Context, requestInfo *types.RequestInfo)) *Application_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestInfo))
	})
	return _c
}

func (_c *Application_Info_Call) Return(responseInfo *types.ResponseInfo, err error) *Application_Info_Call {
	_c.Call.Return(responseInfo, err)
	return _c
}

func (_c *Application_Info_Call) RunAndReturn(run func(context1 context.Context, requestInfo *types.RequestInfo) (*types.ResponseInfo, error)) *Application_Info_Call {
	_c.Call.Return(run)
	return _c
}

// InitChain provides a mock function for the type Application
func (_mock *Application) InitChain(context1 context.Context, requestInitChain *types.RequestInitChain) (*types.ResponseInitChain, error) {
	ret := _mock.Called(context1, requestInitChain)

	if len(ret) == 0 {
		panic("no return value specified for InitChain")
	}

	var r0 *types.ResponseInitChain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestInitChain) (*types.ResponseInitChain, error)); ok {
		return returnFunc(context1, requestInitChain)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestInitChain) *types.ResponseInitChain); ok {
		r0 = returnFunc(context1, requestInitChain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseInitChain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestInitChain) error); ok {
		r1 = returnFunc(context1, requestInitChain)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_InitChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitChain'
type Application_InitChain_Call struct {
	*mock.Call
}

// InitChain is a helper method to define mock.On call
//   - context1
//   - requestInitChain
func (_e *Application_Expecter) InitChain(context1 interface{}, requestInitChain interface{}) *Application_InitChain_Call {
	return &Application_InitChain_Call{Call: _e.mock.On("InitChain", context1, requestInitChain)}
}

func (_c *Application_InitChain_Call) Run(run func(context1 context.Context, requestInitChain *types.RequestInitChain)) *Application_InitChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestInitChain))
	})
	return _c
}

func (_c *Application_InitChain_Call) Return(responseInitChain *types.ResponseInitChain, err error) *Application_InitChain_Call {
	_c.Call.Return(responseInitChain, err)
	return _c
}

func (_c *Application_InitChain_Call) RunAndReturn(run func(context1 context.Context, requestInitChain *types.RequestInitChain) (*types.ResponseInitChain, error)) *Application_InitChain_Call {
	_c.Call.Return(run)
	return _c
}

// ListSnapshots provides a mock function for the type Application
func (_mock *Application) ListSnapshots(context1 context.Context, requestListSnapshots *types.RequestListSnapshots) (*types.ResponseListSnapshots, error) {
	ret := _mock.Called(context1, requestListSnapshots)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 *types.ResponseListSnapshots
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestListSnapshots) (*types.ResponseListSnapshots, error)); ok {
		return returnFunc(context1, requestListSnapshots)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestListSnapshots) *types.ResponseListSnapshots); ok {
		r0 = returnFunc(context1, requestListSnapshots)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseListSnapshots)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestListSnapshots) error); ok {
		r1 = returnFunc(context1, requestListSnapshots)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_ListSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSnapshots'
type Application_ListSnapshots_Call struct {
	*mock.Call
}

// ListSnapshots is a helper method to define mock.On call
//   - context1
//   - requestListSnapshots
func (_e *Application_Expecter) ListSnapshots(context1 interface{}, requestListSnapshots interface{}) *Application_ListSnapshots_Call {
	return &Application_ListSnapshots_Call{Call: _e.mock.On("ListSnapshots", context1, requestListSnapshots)}
}

func (_c *Application_ListSnapshots_Call) Run(run func(context1 context.Context, requestListSnapshots *types.RequestListSnapshots)) *Application_ListSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestListSnapshots))
	})
	return _c
}

func (_c *Application_ListSnapshots_Call) Return(responseListSnapshots *types.ResponseListSnapshots, err error) *Application_ListSnapshots_Call {
	_c.Call.Return(responseListSnapshots, err)
	return _c
}

func (_c *Application_ListSnapshots_Call) RunAndReturn(run func(context1 context.Context, requestListSnapshots *types.RequestListSnapshots) (*types.ResponseListSnapshots, error)) *Application_ListSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSnapshotChunk provides a mock function for the type Application
func (_mock *Application) LoadSnapshotChunk(context1 context.Context, requestLoadSnapshotChunk *types.RequestLoadSnapshotChunk) (*types.ResponseLoadSnapshotChunk, error) {
	ret := _mock.Called(context1, requestLoadSnapshotChunk)

	if len(ret) == 0 {
		panic("no return value specified for LoadSnapshotChunk")
	}

	var r0 *types.ResponseLoadSnapshotChunk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestLoadSnapshotChunk) (*types.ResponseLoadSnapshotChunk, error)); ok {
		return returnFunc(context1, requestLoadSnapshotChunk)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestLoadSnapshotChunk) *types.ResponseLoadSnapshotChunk); ok {
		r0 = returnFunc(context1, requestLoadSnapshotChunk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseLoadSnapshotChunk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestLoadSnapshotChunk) error); ok {
		r1 = returnFunc(context1, requestLoadSnapshotChunk)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_LoadSnapshotChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSnapshotChunk'
type Application_LoadSnapshotChunk_Call struct {
	*mock.Call
}

// LoadSnapshotChunk is a helper method to define mock.On call
//   - context1
//   - requestLoadSnapshotChunk
func (_e *Application_Expecter) LoadSnapshotChunk(context1 interface{}, requestLoadSnapshotChunk interface{}) *Application_LoadSnapshotChunk_Call {
	return &Application_LoadSnapshotChunk_Call{Call: _e.mock.On("LoadSnapshotChunk", context1, requestLoadSnapshotChunk)}
}

func (_c *Application_LoadSnapshotChunk_Call) Run(run func(context1 context.Context, requestLoadSnapshotChunk *types.RequestLoadSnapshotChunk)) *Application_LoadSnapshotChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestLoadSnapshotChunk))
	})
	return _c
}

func (_c *Application_LoadSnapshotChunk_Call) Return(responseLoadSnapshotChunk *types.ResponseLoadSnapshotChunk, err error) *Application_LoadSnapshotChunk_Call {
	_c.Call.Return(responseLoadSnapshotChunk, err)
	return _c
}

func (_c *Application_LoadSnapshotChunk_Call) RunAndReturn(run func(context1 context.Context, requestLoadSnapshotChunk *types.RequestLoadSnapshotChunk) (*types.ResponseLoadSnapshotChunk, error)) *Application_LoadSnapshotChunk_Call {
	_c.Call.Return(run)
	return _c
}

// OfferSnapshot provides a mock function for the type Application
func (_mock *Application) OfferSnapshot(context1 context.Context, requestOfferSnapshot *types.RequestOfferSnapshot) (*types.ResponseOfferSnapshot, error) {
	ret := _mock.Called(context1, requestOfferSnapshot)

	if len(ret) == 0 {
		panic("no return value specified for OfferSnapshot")
	}

	var r0 *types.ResponseOfferSnapshot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestOfferSnapshot) (*types.ResponseOfferSnapshot, error)); ok {
		return returnFunc(context1, requestOfferSnapshot)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestOfferSnapshot) *types.ResponseOfferSnapshot); ok {
		r0 = returnFunc(context1, requestOfferSnapshot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseOfferSnapshot)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestOfferSnapshot) error); ok {
		r1 = returnFunc(context1, requestOfferSnapshot)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_OfferSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OfferSnapshot'
type Application_OfferSnapshot_Call struct {
	*mock.Call
}

// OfferSnapshot is a helper method to define mock.On call
//   - context1
//   - requestOfferSnapshot
func (_e *Application_Expecter) OfferSnapshot(context1 interface{}, requestOfferSnapshot interface{}) *Application_OfferSnapshot_Call {
	return &Application_OfferSnapshot_Call{Call: _e.mock.On("OfferSnapshot", context1, requestOfferSnapshot)}
}

func (_c *Application_OfferSnapshot_Call) Run(run func(context1 context.Context, requestOfferSnapshot *types.RequestOfferSnapshot)) *Application_OfferSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestOfferSnapshot))
	})
	return _c
}

func (_c *Application_OfferSnapshot_Call) Return(responseOfferSnapshot *types.ResponseOfferSnapshot, err error) *Application_OfferSnapshot_Call {
	_c.Call.Return(responseOfferSnapshot, err)
	return _c
}

func (_c *Application_OfferSnapshot_Call) RunAndReturn(run func(context1 context.Context, requestOfferSnapshot *types.RequestOfferSnapshot) (*types.ResponseOfferSnapshot, error)) *Application_OfferSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareProposal provides a mock function for the type Application
func (_mock *Application) PrepareProposal(context1 context.Context, requestPrepareProposal *types.RequestPrepareProposal) (*types.ResponsePrepareProposal, error) {
	ret := _mock.Called(context1, requestPrepareProposal)

	if len(ret) == 0 {
		panic("no return value specified for PrepareProposal")
	}

	var r0 *types.ResponsePrepareProposal
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestPrepareProposal) (*types.ResponsePrepareProposal, error)); ok {
		return returnFunc(context1, requestPrepareProposal)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestPrepareProposal) *types.ResponsePrepareProposal); ok {
		r0 = returnFunc(context1, requestPrepareProposal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponsePrepareProposal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestPrepareProposal) error); ok {
		r1 = returnFunc(context1, requestPrepareProposal)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_PrepareProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareProposal'
type Application_PrepareProposal_Call struct {
	*mock.Call
}

// PrepareProposal is a helper method to define mock.On call
//   - context1
//   - requestPrepareProposal
func (_e *Application_Expecter) PrepareProposal(context1 interface{}, requestPrepareProposal interface{}) *Application_PrepareProposal_Call {
	return &Application_PrepareProposal_Call{Call: _e.mock.On("PrepareProposal", context1, requestPrepareProposal)}
}

func (_c *Application_PrepareProposal_Call) Run(run func(context1 context.Context, requestPrepareProposal *types.RequestPrepareProposal)) *Application_PrepareProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestPrepareProposal))
	})
	return _c
}

func (_c *Application_PrepareProposal_Call) Return(responsePrepareProposal *types.ResponsePrepareProposal, err error) *Application_PrepareProposal_Call {
	_c.Call.Return(responsePrepareProposal, err)
	return _c
}

func (_c *Application_PrepareProposal_Call) RunAndReturn(run func(context1 context.Context, requestPrepareProposal *types.RequestPrepareProposal) (*types.ResponsePrepareProposal, error)) *Application_PrepareProposal_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessProposal provides a mock function for the type Application
func (_mock *Application) ProcessProposal(context1 context.Context, requestProcessProposal *types.RequestProcessProposal) (*types.ResponseProcessProposal, error) {
	ret := _mock.Called(context1, requestProcessProposal)

	if len(ret) == 0 {
		panic("no return value specified for ProcessProposal")
	}

	var r0 *types.ResponseProcessProposal
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestProcessProposal) (*types.ResponseProcessProposal, error)); ok {
		return returnFunc(context1, requestProcessProposal)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestProcessProposal) *types.ResponseProcessProposal); ok {
		r0 = returnFunc(context1, requestProcessProposal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseProcessProposal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestProcessProposal) error); ok {
		r1 = returnFunc(context1, requestProcessProposal)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_ProcessProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessProposal'
type Application_ProcessProposal_Call struct {
	*mock.Call
}

// ProcessProposal is a helper method to define mock.On call
//   - context1
//   - requestProcessProposal
func (_e *Application_Expecter) ProcessProposal(context1 interface{}, requestProcessProposal interface{}) *Application_ProcessProposal_Call {
	return &Application_ProcessProposal_Call{Call: _e.mock.On("ProcessProposal", context1, requestProcessProposal)}
}

func (_c *Application_ProcessProposal_Call) Run(run func(context1 context.Context, requestProcessProposal *types.RequestProcessProposal)) *Application_ProcessProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestProcessProposal))
	})
	return _c
}

func (_c *Application_ProcessProposal_Call) Return(responseProcessProposal *types.ResponseProcessProposal, err error) *Application_ProcessProposal_Call {
	_c.Call.Return(responseProcessProposal, err)
	return _c
}

func (_c *Application_ProcessProposal_Call) RunAndReturn(run func(context1 context.Context, requestProcessProposal *types.RequestProcessProposal) (*types.ResponseProcessProposal, error)) *Application_ProcessProposal_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type Application
func (_mock *Application) Query(context1 context.Context, requestQuery *types.RequestQuery) (*types.ResponseQuery, error) {
	ret := _mock.Called(context1, requestQuery)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *types.ResponseQuery
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestQuery) (*types.ResponseQuery, error)); ok {
		return returnFunc(context1, requestQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestQuery) *types.ResponseQuery); ok {
		r0 = returnFunc(context1, requestQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseQuery)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestQuery) error); ok {
		r1 = returnFunc(context1, requestQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Application_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - context1
//   - requestQuery
func (_e *Application_Expecter) Query(context1 interface{}, requestQuery interface{}) *Application_Query_Call {
	return &Application_Query_Call{Call: _e.mock.On("Query", context1, requestQuery)}
}

func (_c *Application_Query_Call) Run(run func(context1 context.Context, requestQuery *types.RequestQuery)) *Application_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestQuery))
	})
	return _c
}

func (_c *Application_Query_Call) Return(responseQuery *types.ResponseQuery, err error) *Application_Query_Call {
	_c.Call.Return(responseQuery, err)
	return _c
}

func (_c *Application_Query_Call) RunAndReturn(run func(context1 context.Context, requestQuery *types.RequestQuery) (*types.ResponseQuery, error)) *Application_Query_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyVoteExtension provides a mock function for the type Application
func (_mock *Application) VerifyVoteExtension(context1 context.Context, requestVerifyVoteExtension *types.RequestVerifyVoteExtension) (*types.ResponseVerifyVoteExtension, error) {
	ret := _mock.Called(context1, requestVerifyVoteExtension)

	if len(ret) == 0 {
		panic("no return value specified for VerifyVoteExtension")
	}

	var r0 *types.ResponseVerifyVoteExtension
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestVerifyVoteExtension) (*types.ResponseVerifyVoteExtension, error)); ok {
		return returnFunc(context1, requestVerifyVoteExtension)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.RequestVerifyVoteExtension) *types.ResponseVerifyVoteExtension); ok {
		r0 = returnFunc(context1, requestVerifyVoteExtension)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseVerifyVoteExtension)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.RequestVerifyVoteExtension) error); ok {
		r1 = returnFunc(context1, requestVerifyVoteExtension)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_VerifyVoteExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyVoteExtension'
type Application_VerifyVoteExtension_Call struct {
	*mock.Call
}

// VerifyVoteExtension is a helper method to define mock.On call
//   - context1
//   - requestVerifyVoteExtension
func (_e *Application_Expecter) VerifyVoteExtension(context1 interface{}, requestVerifyVoteExtension interface{}) *Application_VerifyVoteExtension_Call {
	return &Application_VerifyVoteExtension_Call{Call: _e.mock.On("VerifyVoteExtension", context1, requestVerifyVoteExtension)}
}

func (_c *Application_VerifyVoteExtension_Call) Run(run func(context1 context.Context, requestVerifyVoteExtension *types.RequestVerifyVoteExtension)) *Application_VerifyVoteExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RequestVerifyVoteExtension))
	})
	return _c
}

func (_c *Application_VerifyVoteExtension_Call) Return(responseVerifyVoteExtension *types.ResponseVerifyVoteExtension, err error) *Application_VerifyVoteExtension_Call {
	_c.Call.Return(responseVerifyVoteExtension, err)
	return _c
}

func (_c *Application_VerifyVoteExtension_Call) RunAndReturn(run func(context1 context.Context, requestVerifyVoteExtension *types.RequestVerifyVoteExtension) (*types.ResponseVerifyVoteExtension, error)) *Application_VerifyVoteExtension_Call {
	_c.Call.Return(run)
	return _c
}
