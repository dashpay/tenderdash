// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	btcjson "github.com/dashpay/dashd-go/btcjson"
	bytes "github.com/tendermint/tendermint/libs/bytes"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNetworkInfo provides a mock function with given fields:
func (_m *Client) GetNetworkInfo() (*btcjson.GetNetworkInfoResult, error) {
	ret := _m.Called()

	var r0 *btcjson.GetNetworkInfoResult
	var r1 error
	if rf, ok := ret.Get(0).(func() (*btcjson.GetNetworkInfoResult, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *btcjson.GetNetworkInfoResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*btcjson.GetNetworkInfoResult)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasternodeListJSON provides a mock function with given fields: filter
func (_m *Client) MasternodeListJSON(filter string) (map[string]btcjson.MasternodelistResultJSON, error) {
	ret := _m.Called(filter)

	var r0 map[string]btcjson.MasternodelistResultJSON
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]btcjson.MasternodelistResultJSON, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]btcjson.MasternodelistResultJSON); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]btcjson.MasternodelistResultJSON)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasternodeStatus provides a mock function with given fields:
func (_m *Client) MasternodeStatus() (*btcjson.MasternodeStatusResult, error) {
	ret := _m.Called()

	var r0 *btcjson.MasternodeStatusResult
	var r1 error
	if rf, ok := ret.Get(0).(func() (*btcjson.MasternodeStatusResult, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *btcjson.MasternodeStatusResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*btcjson.MasternodeStatusResult)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *Client) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuorumInfo provides a mock function with given fields: quorumType, quorumHash
func (_m *Client) QuorumInfo(quorumType btcjson.LLMQType, quorumHash bytes.HexBytes) (*btcjson.QuorumInfoResult, error) {
	ret := _m.Called(quorumType, quorumHash)

	var r0 *btcjson.QuorumInfoResult
	var r1 error
	if rf, ok := ret.Get(0).(func(btcjson.LLMQType, bytes.HexBytes) (*btcjson.QuorumInfoResult, error)); ok {
		return rf(quorumType, quorumHash)
	}
	if rf, ok := ret.Get(0).(func(btcjson.LLMQType, bytes.HexBytes) *btcjson.QuorumInfoResult); ok {
		r0 = rf(quorumType, quorumHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*btcjson.QuorumInfoResult)
		}
	}

	if rf, ok := ret.Get(1).(func(btcjson.LLMQType, bytes.HexBytes) error); ok {
		r1 = rf(quorumType, quorumHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuorumSign provides a mock function with given fields: quorumType, requestID, messageHash, quorumHash
func (_m *Client) QuorumSign(quorumType btcjson.LLMQType, requestID bytes.HexBytes, messageHash bytes.HexBytes, quorumHash bytes.HexBytes) (*btcjson.QuorumSignResult, error) {
	ret := _m.Called(quorumType, requestID, messageHash, quorumHash)

	var r0 *btcjson.QuorumSignResult
	var r1 error
	if rf, ok := ret.Get(0).(func(btcjson.LLMQType, bytes.HexBytes, bytes.HexBytes, bytes.HexBytes) (*btcjson.QuorumSignResult, error)); ok {
		return rf(quorumType, requestID, messageHash, quorumHash)
	}
	if rf, ok := ret.Get(0).(func(btcjson.LLMQType, bytes.HexBytes, bytes.HexBytes, bytes.HexBytes) *btcjson.QuorumSignResult); ok {
		r0 = rf(quorumType, requestID, messageHash, quorumHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*btcjson.QuorumSignResult)
		}
	}

	if rf, ok := ret.Get(1).(func(btcjson.LLMQType, bytes.HexBytes, bytes.HexBytes, bytes.HexBytes) error); ok {
		r1 = rf(quorumType, requestID, messageHash, quorumHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuorumVerify provides a mock function with given fields: quorumType, requestID, messageHash, signature, quorumHash
func (_m *Client) QuorumVerify(quorumType btcjson.LLMQType, requestID bytes.HexBytes, messageHash bytes.HexBytes, signature bytes.HexBytes, quorumHash bytes.HexBytes) (bool, error) {
	ret := _m.Called(quorumType, requestID, messageHash, signature, quorumHash)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(btcjson.LLMQType, bytes.HexBytes, bytes.HexBytes, bytes.HexBytes, bytes.HexBytes) (bool, error)); ok {
		return rf(quorumType, requestID, messageHash, signature, quorumHash)
	}
	if rf, ok := ret.Get(0).(func(btcjson.LLMQType, bytes.HexBytes, bytes.HexBytes, bytes.HexBytes, bytes.HexBytes) bool); ok {
		r0 = rf(quorumType, requestID, messageHash, signature, quorumHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(btcjson.LLMQType, bytes.HexBytes, bytes.HexBytes, bytes.HexBytes, bytes.HexBytes) error); ok {
		r1 = rf(quorumType, requestID, messageHash, signature, quorumHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
