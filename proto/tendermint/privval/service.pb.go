// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/privval/service.proto

package privval

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("tendermint/privval/service.proto", fileDescriptor_7afe74f9f46d3dc9) }

var fileDescriptor_7afe74f9f46d3dc9 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x5b, 0x04, 0xd1, 0xa1, 0x0b, 0x99, 0x65, 0x17, 0x83, 0xff, 0x42, 0x85, 0x04, 0x74,
	0xe5, 0x52, 0x37, 0x55, 0xdc, 0x84, 0xb6, 0x54, 0xd0, 0x55, 0x7e, 0x2e, 0xcd, 0x40, 0x92, 0x1b,
	0x67, 0x6e, 0x82, 0x7d, 0x0b, 0x1f, 0xcb, 0x65, 0x97, 0x2e, 0x25, 0x79, 0x01, 0x1f, 0x41, 0x6a,
	0x32, 0x54, 0x6d, 0xa2, 0x6e, 0xe7, 0x7c, 0xe7, 0x3b, 0xb3, 0xb8, 0x6c, 0x97, 0x20, 0x09, 0x40,
	0xc5, 0x32, 0x21, 0x3b, 0x55, 0x32, 0xcf, 0xdd, 0xc8, 0xd6, 0xa0, 0x72, 0xe9, 0x83, 0x95, 0x2a,
	0x24, 0xe4, 0x7c, 0x45, 0x58, 0x35, 0xd1, 0x17, 0x0d, 0x2d, 0x9a, 0xa7, 0xa0, 0xab, 0xce, 0xd9,
	0xfb, 0x06, 0xdb, 0x71, 0x94, 0xcc, 0xa7, 0x6e, 0x24, 0x03, 0x97, 0x50, 0x5d, 0x3a, 0x37, 0x7c,
	0xc4, 0xb6, 0x87, 0x40, 0x4e, 0xe6, 0xdd, 0xc2, 0x9c, 0xef, 0x59, 0xeb, 0x5a, 0xab, 0xca, 0x46,
	0xf0, 0x98, 0x81, 0xa6, 0xfe, 0xfe, 0x6f, 0x88, 0x4e, 0x31, 0xd1, 0xc0, 0x1f, 0x58, 0x6f, 0xe9,
	0x54, 0x38, 0x79, 0xba, 0x76, 0x75, 0xc8, 0x0f, 0x1b, 0x3b, 0x26, 0x36, 0xe6, 0xa3, 0x3f, 0xa8,
	0x5a, 0x1e, 0x33, 0x3e, 0x04, 0x9a, 0x84, 0x0a, 0x74, 0x88, 0x51, 0x50, 0xff, 0x7c, 0xd0, 0x54,
	0xfe, 0x01, 0x99, 0xa1, 0xd3, 0x7f, 0xb1, 0xf5, 0xdc, 0x1d, 0xdb, 0x1a, 0xcb, 0x59, 0x32, 0x45,
	0x02, 0x7e, 0xd0, 0x54, 0x34, 0xa9, 0xb1, 0x1f, 0xb7, 0x41, 0x10, 0x54, 0x58, 0x2d, 0xf6, 0x59,
	0x6f, 0xf9, 0xea, 0x28, 0x4c, 0x51, 0xbb, 0x11, 0x3f, 0x69, 0xeb, 0x19, 0xc2, 0x0c, 0x0c, 0xda,
	0x07, 0x56, 0x68, 0x35, 0x72, 0x35, 0x7e, 0x29, 0x44, 0x77, 0x51, 0x88, 0xee, 0x5b, 0x21, 0xba,
	0xcf, 0xa5, 0xe8, 0x2c, 0x4a, 0xd1, 0x79, 0x2d, 0x45, 0xe7, 0xfe, 0x62, 0x26, 0x29, 0xcc, 0x3c,
	0xcb, 0xc7, 0xd8, 0xfe, 0x72, 0x37, 0xdf, 0x4e, 0x08, 0x09, 0xed, 0xf5, 0x9b, 0xf2, 0x36, 0x3f,
	0x93, 0xf3, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xfe, 0xa1, 0xc7, 0xa6, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrivValidatorAPIClient is the client API for PrivValidatorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivValidatorAPIClient interface {
	GetPubKey(ctx context.Context, in *PubKeyRequest, opts ...grpc.CallOption) (*PubKeyResponse, error)
	GetProTxHash(ctx context.Context, in *ProTxHashRequest, opts ...grpc.CallOption) (*ProTxHashResponse, error)
	GetThresholdPubKey(ctx context.Context, in *ThresholdPubKeyRequest, opts ...grpc.CallOption) (*ThresholdPubKeyResponse, error)
	SignVote(ctx context.Context, in *SignVoteRequest, opts ...grpc.CallOption) (*SignedVoteResponse, error)
	SignProposal(ctx context.Context, in *SignProposalRequest, opts ...grpc.CallOption) (*SignedProposalResponse, error)
}

type privValidatorAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivValidatorAPIClient(cc *grpc.ClientConn) PrivValidatorAPIClient {
	return &privValidatorAPIClient{cc}
}

func (c *privValidatorAPIClient) GetPubKey(ctx context.Context, in *PubKeyRequest, opts ...grpc.CallOption) (*PubKeyResponse, error) {
	out := new(PubKeyResponse)
	err := c.cc.Invoke(ctx, "/tendermint.privval.PrivValidatorAPI/GetPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privValidatorAPIClient) GetProTxHash(ctx context.Context, in *ProTxHashRequest, opts ...grpc.CallOption) (*ProTxHashResponse, error) {
	out := new(ProTxHashResponse)
	err := c.cc.Invoke(ctx, "/tendermint.privval.PrivValidatorAPI/GetProTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privValidatorAPIClient) GetThresholdPubKey(ctx context.Context, in *ThresholdPubKeyRequest, opts ...grpc.CallOption) (*ThresholdPubKeyResponse, error) {
	out := new(ThresholdPubKeyResponse)
	err := c.cc.Invoke(ctx, "/tendermint.privval.PrivValidatorAPI/GetThresholdPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privValidatorAPIClient) SignVote(ctx context.Context, in *SignVoteRequest, opts ...grpc.CallOption) (*SignedVoteResponse, error) {
	out := new(SignedVoteResponse)
	err := c.cc.Invoke(ctx, "/tendermint.privval.PrivValidatorAPI/SignVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privValidatorAPIClient) SignProposal(ctx context.Context, in *SignProposalRequest, opts ...grpc.CallOption) (*SignedProposalResponse, error) {
	out := new(SignedProposalResponse)
	err := c.cc.Invoke(ctx, "/tendermint.privval.PrivValidatorAPI/SignProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivValidatorAPIServer is the server API for PrivValidatorAPI service.
type PrivValidatorAPIServer interface {
	GetPubKey(context.Context, *PubKeyRequest) (*PubKeyResponse, error)
	GetProTxHash(context.Context, *ProTxHashRequest) (*ProTxHashResponse, error)
	GetThresholdPubKey(context.Context, *ThresholdPubKeyRequest) (*ThresholdPubKeyResponse, error)
	SignVote(context.Context, *SignVoteRequest) (*SignedVoteResponse, error)
	SignProposal(context.Context, *SignProposalRequest) (*SignedProposalResponse, error)
}

// UnimplementedPrivValidatorAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPrivValidatorAPIServer struct {
}

func (*UnimplementedPrivValidatorAPIServer) GetPubKey(ctx context.Context, req *PubKeyRequest) (*PubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubKey not implemented")
}
func (*UnimplementedPrivValidatorAPIServer) GetProTxHash(ctx context.Context, req *ProTxHashRequest) (*ProTxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProTxHash not implemented")
}
func (*UnimplementedPrivValidatorAPIServer) GetThresholdPubKey(ctx context.Context, req *ThresholdPubKeyRequest) (*ThresholdPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThresholdPubKey not implemented")
}
func (*UnimplementedPrivValidatorAPIServer) SignVote(ctx context.Context, req *SignVoteRequest) (*SignedVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignVote not implemented")
}
func (*UnimplementedPrivValidatorAPIServer) SignProposal(ctx context.Context, req *SignProposalRequest) (*SignedProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignProposal not implemented")
}

func RegisterPrivValidatorAPIServer(s *grpc.Server, srv PrivValidatorAPIServer) {
	s.RegisterService(&_PrivValidatorAPI_serviceDesc, srv)
}

func _PrivValidatorAPI_GetPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivValidatorAPIServer).GetPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.privval.PrivValidatorAPI/GetPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivValidatorAPIServer).GetPubKey(ctx, req.(*PubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivValidatorAPI_GetProTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProTxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivValidatorAPIServer).GetProTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.privval.PrivValidatorAPI/GetProTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivValidatorAPIServer).GetProTxHash(ctx, req.(*ProTxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivValidatorAPI_GetThresholdPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThresholdPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivValidatorAPIServer).GetThresholdPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.privval.PrivValidatorAPI/GetThresholdPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivValidatorAPIServer).GetThresholdPubKey(ctx, req.(*ThresholdPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivValidatorAPI_SignVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivValidatorAPIServer).SignVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.privval.PrivValidatorAPI/SignVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivValidatorAPIServer).SignVote(ctx, req.(*SignVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivValidatorAPI_SignProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivValidatorAPIServer).SignProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.privval.PrivValidatorAPI/SignProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivValidatorAPIServer).SignProposal(ctx, req.(*SignProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivValidatorAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tendermint.privval.PrivValidatorAPI",
	HandlerType: (*PrivValidatorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPubKey",
			Handler:    _PrivValidatorAPI_GetPubKey_Handler,
		},
		{
			MethodName: "GetProTxHash",
			Handler:    _PrivValidatorAPI_GetProTxHash_Handler,
		},
		{
			MethodName: "GetThresholdPubKey",
			Handler:    _PrivValidatorAPI_GetThresholdPubKey_Handler,
		},
		{
			MethodName: "SignVote",
			Handler:    _PrivValidatorAPI_SignVote_Handler,
		},
		{
			MethodName: "SignProposal",
			Handler:    _PrivValidatorAPI_SignProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tendermint/privval/service.proto",
}
