syntax = "proto3";
package tendermint.abci;

option go_package = "github.com/tendermint/tendermint/abci/types";

import "tendermint/crypto/proof.proto";
import "tendermint/types/dash.proto";
import "tendermint/types/block.proto";
import "tendermint/types/types.proto";
import "tendermint/crypto/keys.proto";
import "tendermint/types/params.proto";
import "tendermint/version/types.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

// This file is copied from http://github.com/tendermint/abci
// NOTE: When using custom types, mind the warnings.
// https://github.com/gogo/protobuf/blob/master/custom_types.md#warnings-and-issues

//----------------------------------------
// Request types

message Request {
  oneof value {
    RequestEcho                echo                  = 1;
    RequestFlush               flush                 = 2;
    RequestInfo                info                  = 3;
    RequestInitChain           init_chain            = 4;
    RequestQuery               query                 = 5;
    RequestCheckTx             check_tx              = 7;
    RequestListSnapshots       list_snapshots        = 11;
    RequestOfferSnapshot       offer_snapshot        = 12;
    RequestLoadSnapshotChunk   load_snapshot_chunk   = 13;
    RequestApplySnapshotChunk  apply_snapshot_chunk  = 14;
    RequestPrepareProposal     prepare_proposal      = 15;
    RequestProcessProposal     process_proposal      = 16;
    RequestExtendVote          extend_vote           = 17;
    RequestVerifyVoteExtension verify_vote_extension = 18;
    RequestFinalizeBlock       finalize_block        = 19;
  }
  reserved 6, 8, 9, 10;  // RequestBeginBlock, RequestDeliverTx, RequestEndBlock, RequestCommit
}

message RequestEcho {
  string message = 1;  // A string to echo back
}

message RequestFlush {}

message RequestInfo {
  string version       = 1;
  uint64 block_version = 2;
  uint64 p2p_version   = 3;
  string abci_version  = 4;
}

message RequestInitChain {
  // Genesis time
  google.protobuf.Timestamp time = 1
      [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // ID of the blockchain.
  string chain_id = 2;
  // Initial consensus-critical parameters.
  tendermint.types.ConsensusParams consensus_params = 3;
  // Initial genesis validators, sorted by voting power.
  ValidatorSetUpdate validator_set = 4 [(gogoproto.nullable) = true];
  // Serialized initial application state. JSON bytes.
  bytes app_state_bytes = 5;
  // Height of the initial block (typically `1`).
  int64 initial_height = 6;
  // Initial core chain lock height.
  uint32 initial_core_height = 7;
}

message RequestQuery {
  bytes  data   = 1;
  string path   = 2;
  int64  height = 3;
  bool   prove  = 4;
}

enum CheckTxType {
  NEW     = 0 [(gogoproto.enumvalue_customname) = "New"];
  RECHECK = 1 [(gogoproto.enumvalue_customname) = "Recheck"];
}

message RequestCheckTx {
  bytes       tx   = 1;
  CheckTxType type = 2;
}

// lists available snapshots
message RequestListSnapshots {}

// offers a snapshot to the application
message RequestOfferSnapshot {
  // The snapshot offered for restoration.
  Snapshot snapshot = 1;
  // The light client-verified app hash for this height, from the blockchain.
  bytes app_hash = 2;
}

// loads a snapshot chunk
message RequestLoadSnapshotChunk {
  uint64 height = 1;
  uint32 format = 2;
  uint32 chunk  = 3;
}

// Applies a snapshot chunk
message RequestApplySnapshotChunk {
  uint32 index  = 1;
  bytes  chunk  = 2;
  string sender = 3;
}

message RequestPrepareProposal {
  // Currently configured maximum size in bytes taken by the modified transactions.
  // The modified transactions cannot exceed this size.
  int64 max_tx_bytes = 1;
  // Preliminary list of transactions that have been picked as part of the block to propose.
  // Sent to the app for possible modifications.
  repeated bytes txs = 2;
  // Info about the last commit, obtained locally from Tendermint's data structures.
  CommitInfo local_last_commit = 3 [(gogoproto.nullable) = false];
  // List of information about validators that acted incorrectly.
  repeated Misbehavior misbehavior = 4 [(gogoproto.nullable) = false];
  // The height of the block that will be proposed.
  int64 height = 5;
  // Timestamp of the block that that will be proposed.
  google.protobuf.Timestamp time = 6 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // Merkle root of the next validator set.
  bytes next_validators_hash = 7;
  // Round number for the block.
  int32 round = 8;
  // Core chain lock height to be used when signing this block.
  uint32 core_chain_locked_height = 9;
  // ProTxHash of the original proposer of the block.
  bytes proposer_pro_tx_hash = 10;
  // Proposer's latest available app protocol version.
  uint64 proposed_app_version = 11;
  // App and block version used to generate the block.
  tendermint.version.Consensus version = 12;
  // quorum_hash contains hash of validator quorum that will sign the block
  bytes quorum_hash = 13;
}

message RequestProcessProposal {
  // List of transactions that have been picked as part of the proposed
  repeated bytes txs = 1;
  // Info about the last commit, obtained from the information in the proposed block.
  CommitInfo proposed_last_commit = 2 [(gogoproto.nullable) = false];
  // List of information about validators that acted incorrectly.
  repeated Misbehavior misbehavior = 3 [(gogoproto.nullable) = false];
  // The block header's hash of the proposed block.
  bytes hash = 4;
  // The height of the proposed block.
  int64 height = 5;
  // Round number for the block
  int32 round = 6;
  // Timestamp included in the proposed block.
  google.protobuf.Timestamp time = 7 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // Merkle root of the next validator set.
  bytes next_validators_hash = 8;
  // Core chain lock height to be used when signing this block.
  uint32 core_chain_locked_height = 9;
  // Next core-chain-lock-update for validation in ABCI.
  tendermint.types.CoreChainLock core_chain_lock_update = 10;
  // ProTxHash of the original proposer of the block.
  bytes proposer_pro_tx_hash = 11;
  // Proposer's latest available app protocol version.
  uint64 proposed_app_version = 12;
  // App and block version used to generate the block.
  tendermint.version.Consensus version = 13;
  // quorum_hash contains hash of validator quorum that will sign the block
  bytes quorum_hash = 14;
}

// Extends a vote with application-side injection
message RequestExtendVote {
  bytes hash   = 1;
  int64 height = 2;
  // Round number for the block
  int32 round = 3;
}

// Verify the vote extension
message RequestVerifyVoteExtension {
  bytes hash                  = 1;
  bytes validator_pro_tx_hash = 2;
  int64 height                = 3;
  // Round number for the block
  int32                        round           = 4;
  repeated ExtendVoteExtension vote_extensions = 5;
}

message RequestFinalizeBlock {
  // Info about the current commit
  CommitInfo commit = 1 [(gogoproto.nullable) = false];
  // List of information about validators that acted incorrectly.
  repeated Misbehavior misbehavior = 2 [(gogoproto.nullable) = false];
  // The block header's hash. Present for convenience (can be derived from the block header).
  bytes hash = 3;
  // The height of the finalized block.
  int64 height = 4;
  // Round number for the block
  int32 round = 5;
  // The block that was finalized
  tendermint.types.Block block = 6;
  // The block ID that was finalized
  tendermint.types.BlockID block_id = 7 [(gogoproto.customname) = "BlockID"];
}

//----------------------------------------
// Response types

message Response {
  oneof value {
    ResponseException           exception             = 1;
    ResponseEcho                echo                  = 2;
    ResponseFlush               flush                 = 3;
    ResponseInfo                info                  = 4;
    ResponseInitChain           init_chain            = 5;
    ResponseQuery               query                 = 6;
    ResponseCheckTx             check_tx              = 7;
    ResponseListSnapshots       list_snapshots        = 8;
    ResponseOfferSnapshot       offer_snapshot        = 9;
    ResponseLoadSnapshotChunk   load_snapshot_chunk   = 10;
    ResponseApplySnapshotChunk  apply_snapshot_chunk  = 11;
    ResponsePrepareProposal     prepare_proposal      = 12;
    ResponseProcessProposal     process_proposal      = 13;
    ResponseExtendVote          extend_vote           = 14;
    ResponseVerifyVoteExtension verify_vote_extension = 15;
    ResponseFinalizeBlock       finalize_block        = 16;
  }
}

// nondeterministic
message ResponseException {
  string error = 1;
}

message ResponseEcho {
  string message = 1;
}

message ResponseFlush {}

message ResponseInfo {
  string data = 1;
  // this is the software version of the application.
  string version             = 2;
  uint64 app_version         = 3;
  int64  last_block_height   = 4;
  bytes  last_block_app_hash = 5;
}

message ResponseInitChain {
  // Initial consensus-critical parameters (optional).
  tendermint.types.ConsensusParams consensus_params = 1;
  // Initial application hash.
  bytes app_hash = 2;
  // Initial validator set (optional).
  ValidatorSetUpdate validator_set_update = 3 [(gogoproto.nullable) = false];
  // Initial core chain lock update.
  tendermint.types.CoreChainLock next_core_chain_lock_update = 4;
  // Initial height of core lock.
  uint32 initial_core_height = 5;
}

message ResponseQuery {
  uint32                     code      = 1;
  string                     log       = 2;  // nondeterministic
  string                     info      = 3;  // nondeterministic
  int64                      index     = 4;
  bytes                      key       = 5;
  bytes                      value     = 6;
  tendermint.crypto.ProofOps proof_ops = 7;
  int64                      height    = 8;
  string                     codespace = 9;
}

message ResponseCheckTx {
  uint32 code       = 1;
  bytes  data       = 2;
  string info       = 3;  // nondeterministic
  int64  gas_wanted = 4;
  string codespace  = 5;
  string sender     = 6;
  int64  priority   = 7;
  // mempool_error is set by Tendermint. ABCI applications creating a ResponseCheckTX should not set mempool_error.
  string mempool_error = 8;
}

message ResponseListSnapshots {
  repeated Snapshot snapshots = 1;
}

message ResponseOfferSnapshot {
  Result result = 1;

  enum Result {
    UNKNOWN       = 0;  // Unknown result, abort all snapshot restoration
    ACCEPT        = 1;  // Snapshot accepted, apply chunks
    ABORT         = 2;  // Abort all snapshot restoration
    REJECT        = 3;  // Reject this specific snapshot, try others
    REJECT_FORMAT = 4;  // Reject all snapshots of this format, try others
    REJECT_SENDER = 5;  // Reject all snapshots from the sender(s), try others
  }
}

message ResponseLoadSnapshotChunk {
  bytes chunk = 1;
}

message ResponseApplySnapshotChunk {
  Result          result         = 1;
  repeated uint32 refetch_chunks = 2;  // Chunks to refetch and reapply
  repeated string reject_senders = 3;  // Chunk senders to reject and ban

  enum Result {
    UNKNOWN         = 0;  // Unknown result, abort all snapshot restoration
    ACCEPT          = 1;  // Chunk successfully accepted
    ABORT           = 2;  // Abort all snapshot restoration
    RETRY           = 3;  // Retry chunk (combine with refetch and reject)
    RETRY_SNAPSHOT  = 4;  // Retry snapshot (combine with refetch and reject)
    REJECT_SNAPSHOT = 5;  // Reject this snapshot, try others
  }
}

message ResponsePrepareProposal {
  // Possibly modified list of transactions that have been picked as part of the proposed block.
  repeated TxRecord tx_records = 1;
  // The Merkle root hash of the application state.
  bytes app_hash = 2;
  // List of structures containing the data resulting from executing the transactions.
  repeated ExecTxResult tx_results = 3;
  // Changes to consensus-critical gas, size, and other parameters that will be applied at next height.
  tendermint.types.ConsensusParams consensus_param_updates = 4;
  // Core chain lock that will be used for generated block.
  tendermint.types.CoreChainLock core_chain_lock_update = 5;
  // Changes to validator set that will be applied at next height.
  ValidatorSetUpdate validator_set_update = 6 [(gogoproto.nullable) = true];
}

message ResponseProcessProposal {
  // `enum` that signals if the application finds the proposal valid.
  ProposalStatus status = 1;

  enum ProposalStatus {
    UNKNOWN = 0;  // Unspecified error occurred
    ACCEPT  = 1;  // Proposal accepted
    REJECT  = 2;  // Proposal is not valid; prevoting `nil`
  }

  // The Merkle root hash of the application state.
  bytes app_hash = 2;
  // List of structures containing the data resulting from executing the transactions.
  repeated ExecTxResult tx_results = 3;
  // Changes to consensus-critical gas, size, and other parameters.
  tendermint.types.ConsensusParams consensus_param_updates = 4;

  // Changes to validator set (set voting power to 0 to remove).
  ValidatorSetUpdate validator_set_update = 5 [(gogoproto.nullable) = true];
}

message ExtendVoteExtension {
  tendermint.types.VoteExtensionType type      = 1;
  bytes                              extension = 2;
}

message ResponseExtendVote {
  repeated ExtendVoteExtension vote_extensions = 1;
}

message ResponseVerifyVoteExtension {
  VerifyStatus status = 1;

  enum VerifyStatus {
    UNKNOWN = 0;
    ACCEPT  = 1;
    REJECT  = 2;
  }
}

// In same-block execution mode, Tendermint will log an error and ignore values for ResponseFinalizeBlock.app_hash,
// ResponseFinalizeBlock.tx_results, ResponseFinalizeBlock.validator_updates, and ResponsePrepareProposal.consensus_param_updates,
// as those must have been provided by PrepareProposal.
message ResponseFinalizeBlock {
  // Type & Key-Value events for indexing
  repeated Event events = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "events,omitempty"];
  // Blocks below this height may be removed. Defaults to `0` (retain all).
  int64 retain_height = 2;
}

//----------------------------------------
// Misc.

message CommitInfo {
  int32    round                                                    = 1;
  bytes    quorum_hash                                              = 2;
  bytes    block_signature                                          = 3;
  repeated tendermint.types.VoteExtension threshold_vote_extensions = 4;
}

// Event allows application developers to attach additional information to
// ResponseCheckTx, ResponsePrepareProposal, ResponseProcessProposal
// and ResponseFinalizeBlock.
//
// Later, transactions may be queried using these events.
message Event {
  string                  type       = 1;
  repeated EventAttribute attributes = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "attributes,omitempty"];
}

// EventAttribute is a single key-value pair, associated with an event.
message EventAttribute {
  string key   = 1;
  string value = 2;
  bool   index = 3;  // nondeterministic
}

// ExecTxResult contains results of executing one individual transaction.
message ExecTxResult {
  uint32         code       = 1;
  bytes          data       = 2;
  string         log        = 3;  // nondeterministic
  string         info       = 4;  // nondeterministic
  int64          gas_wanted = 5;
  int64          gas_used   = 6;
  repeated Event events     = 7
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "events,omitempty"];  // nondeterministic
  string codespace = 8;
}

// TxResult contains results of executing the transaction.
//
// One usage is indexing transaction results.
message TxResult {
  int64        height = 1;
  uint32       index  = 2;
  bytes        tx     = 3;
  ExecTxResult result = 4 [(gogoproto.nullable) = false];
}

message TxRecord {
  TxAction action = 1;
  bytes    tx     = 2;

  // TxAction contains App-provided information on what to do with a transaction that is part of a raw proposal
  enum TxAction {
    UNKNOWN    = 0;  // Unknown action
    UNMODIFIED = 1;  // The Application did not modify this transaction.
    ADDED      = 2;  // The Application added this transaction.
    REMOVED    = 3;  // The Application wants this transaction removed from the proposal and the mempool.
  }
}

//----------------------------------------
// Blockchain Types

// Validator
message Validator {
  int64 power       = 1;  // The voting power
  bytes pro_tx_hash = 2;
}

// ValidatorUpdate
message ValidatorUpdate {
  tendermint.crypto.PublicKey pub_key      = 1 [(gogoproto.nullable) = true];
  int64                       power        = 2;
  bytes                       pro_tx_hash  = 3;
  string                      node_address = 4 [(gogoproto.nullable) = true];  // address of the Validator, correct URI
}

message ValidatorSetUpdate {
  repeated ValidatorUpdate    validator_updates    = 1 [(gogoproto.nullable) = false];
  tendermint.crypto.PublicKey threshold_public_key = 2 [(gogoproto.nullable) = false];
  bytes                       quorum_hash          = 3;
}

message ThresholdPublicKeyUpdate {
  tendermint.crypto.PublicKey threshold_public_key = 1 [(gogoproto.nullable) = false];
}

message QuorumHashUpdate {
  bytes quorum_hash = 1;
}

// VoteInfo
message VoteInfo {
  Validator validator         = 1 [(gogoproto.nullable) = false];
  bool      signed_last_block = 2;
}

// ExtendedVoteInfo
message ExtendedVoteInfo {
  // The validator that sent the vote.
  Validator validator = 1 [(gogoproto.nullable) = false];
  // Indicates whether the validator signed the last block, allowing for rewards based on validator availability.
  bool signed_last_block = 2;
  // Non-deterministic extension provided by the sending validator's application.
  bytes vote_extension = 3;
}

enum MisbehaviorType {
  UNKNOWN             = 0;
  DUPLICATE_VOTE      = 1;
  LIGHT_CLIENT_ATTACK = 2;
}

message Misbehavior {
  MisbehaviorType type = 1;
  // The offending validator
  Validator validator = 2 [(gogoproto.nullable) = false];
  // The height when the offense occurred
  int64 height = 3;
  // The corresponding time where the offense occurred
  google.protobuf.Timestamp time = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // Total voting power of the validator set in case the ABCI application does
  // not store historical validators.
  // https://github.com/tendermint/tendermint/issues/4581
  int64 total_voting_power = 5;
}

//----------------------------------------
// State Sync Types

message Snapshot {
  uint64 height   = 1;  // The height at which the snapshot was taken
  uint32 format   = 2;  // The application-specific snapshot format
  uint32 chunks   = 3;  // Number of chunks in the snapshot
  bytes  hash     = 4;  // Arbitrary snapshot hash, equal only if identical
  bytes  metadata = 5;  // Arbitrary application metadata
}

//----------------------------------------
// Service Definition

service ABCIApplication {
  // Echo a string to test an abci client/server implementation
  rpc Echo(RequestEcho) returns (ResponseEcho);
  rpc Flush(RequestFlush) returns (ResponseFlush);
  rpc Info(RequestInfo) returns (ResponseInfo);
  rpc CheckTx(RequestCheckTx) returns (ResponseCheckTx);
  rpc Query(RequestQuery) returns (ResponseQuery);
  rpc InitChain(RequestInitChain) returns (ResponseInitChain);
  rpc ListSnapshots(RequestListSnapshots) returns (ResponseListSnapshots);
  rpc OfferSnapshot(RequestOfferSnapshot) returns (ResponseOfferSnapshot);
  rpc LoadSnapshotChunk(RequestLoadSnapshotChunk) returns (ResponseLoadSnapshotChunk);
  rpc ApplySnapshotChunk(RequestApplySnapshotChunk) returns (ResponseApplySnapshotChunk);
  rpc PrepareProposal(RequestPrepareProposal) returns (ResponsePrepareProposal);
  rpc ProcessProposal(RequestProcessProposal) returns (ResponseProcessProposal);
  rpc ExtendVote(RequestExtendVote) returns (ResponseExtendVote);
  rpc VerifyVoteExtension(RequestVerifyVoteExtension) returns (ResponseVerifyVoteExtension);
  rpc FinalizeBlock(RequestFinalizeBlock) returns (ResponseFinalizeBlock);
}
