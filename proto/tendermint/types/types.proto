syntax = "proto3";
package tendermint.types;

option go_package = "github.com/tendermint/tendermint/proto/tendermint/types";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "tendermint/crypto/proof.proto";
import "tendermint/version/types.proto";
// import "tendermint/types/validator.proto";


// BlockIdFlag indicates which BlcokID the signature is for
enum BlockIDFlag {
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix)   = false;

  BLOCK_ID_FLAG_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "BlockIDFlagUnknown"];
  BLOCK_ID_FLAG_ABSENT  = 1 [(gogoproto.enumvalue_customname) = "BlockIDFlagAbsent"];
  BLOCK_ID_FLAG_COMMIT  = 2 [(gogoproto.enumvalue_customname) = "BlockIDFlagCommit"];
  BLOCK_ID_FLAG_NIL     = 3 [(gogoproto.enumvalue_customname) = "BlockIDFlagNil"];
}

// SignedMsgType is a type of signed message in the consensus.
enum SignedMsgType {
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix)   = false;

  SIGNED_MSG_TYPE_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "UnknownType"];
  // Votes
  SIGNED_MSG_TYPE_PREVOTE   = 1 [(gogoproto.enumvalue_customname) = "PrevoteType"];
  SIGNED_MSG_TYPE_PRECOMMIT = 2 [(gogoproto.enumvalue_customname) = "PrecommitType"];
  SIGNED_MSG_TYPE_COMMIT    = 3 [(gogoproto.enumvalue_customname) = "CommitType"];

  // Proposals
  SIGNED_MSG_TYPE_PROPOSAL = 32 [(gogoproto.enumvalue_customname) = "ProposalType"];
}

// PartsetHeader
message PartSetHeader {
  uint32 total = 1;
  bytes  hash  = 2;
}

message Part {
  uint32                  index = 1;
  bytes                   bytes = 2;
  tendermint.crypto.Proof proof = 3 [(gogoproto.nullable) = false];
}

// BlockID
message BlockID {
  bytes         hash            = 1;
  PartSetHeader part_set_header = 2 [(gogoproto.nullable) = false];
}

// StateID
message StateID {
  bytes last_app_hash = 1;
  int64 height = 2;
}


// CoreChainLock represents a core chain lock for synchronization between state data and core chain
message CoreChainLock {
  option (gogoproto.equal) = true;
  uint32 core_block_height = 1;
  bytes  core_block_hash   = 2;
  bytes  signature         = 3;
}

// Data contains the set of transactions included in the block
message Data {
  // Txs that will be applied by state @ block.Height+1.
  // NOTE: not all txs here are valid.  We're just agreeing on the order first.
  // This means that block.AppHash does not include these txs.
  repeated bytes txs = 1;
}

// Vote represents a prevote, precommit, or commit vote from validators for
// consensus.
message Vote {
  SignedMsgType type     = 1;
  int64         height   = 2;
  int32         round    = 3;
  BlockID       block_id = 4
      [(gogoproto.nullable) = false, (gogoproto.customname) = "BlockID"];  // zero if vote is nil.
  bytes   validator_pro_tx_hash = 6;
  int32   validator_index       = 7;
  bytes   block_signature       = 8;
  bytes   state_signature       = 10;
}

// Commit contains the evidence that a block was committed by a set of validators.
message Commit {
  int64   height                    = 1;
  int32   round                     = 2;
  BlockID block_id                  = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "BlockID"];
  tendermint.types.StateID state_id                  = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "StateID"];
  bytes   quorum_hash               = 6;
  bytes   threshold_block_signature = 7;
  bytes   threshold_state_signature = 8;
}

message Proposal {
  SignedMsgType             type                     = 1;
  int64                     height                   = 2;
  uint32                    core_chain_locked_height = 100;
  int32                     round                    = 3;
  int32                     pol_round                = 4;
  BlockID                   block_id                 = 5 [(gogoproto.customname) = "BlockID", (gogoproto.nullable) = false];
  google.protobuf.Timestamp timestamp                = 6 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  bytes                     signature                = 7;
}

// TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
message TxProof {
  bytes                   root_hash = 1;
  bytes                   data      = 2;
  tendermint.crypto.Proof proof     = 3;
}

// NetworkEndpoint represents network endpoint address, that is - IP address and port.
// IP address is encoded as IPv6 address (128 bit, big endian).
// IPv4 addresses are stored as IPv4-Mapped IPv6 Address, as definied in RFC 4291 section 2.5.5.2.
message NetworkEndpoint {
  bytes ip = 1 [(gogoproto.customtype) = "IPAddress", (gogoproto.customname)="IP"]; // Big-endian encoded ipv4 or ipv6 address
  uint32 port = 2;
}
