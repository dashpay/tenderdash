// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dashpay/tenderdash/internal/consensus/versioned/selectproposer"
	"github.com/dashpay/tenderdash/types"
	mock "github.com/stretchr/testify/mock"
)

// NewProposerSelector creates a new instance of ProposerSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProposerSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProposerSelector {
	mock := &ProposerSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ProposerSelector is an autogenerated mock type for the ProposerSelector type
type ProposerSelector struct {
	mock.Mock
}

type ProposerSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *ProposerSelector) EXPECT() *ProposerSelector_Expecter {
	return &ProposerSelector_Expecter{mock: &_m.Mock}
}

// Copy provides a mock function for the type ProposerSelector
func (_mock *ProposerSelector) Copy() selectproposer.ProposerSelector {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 selectproposer.ProposerSelector
	if returnFunc, ok := ret.Get(0).(func() selectproposer.ProposerSelector); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(selectproposer.ProposerSelector)
		}
	}
	return r0
}

// ProposerSelector_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type ProposerSelector_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
func (_e *ProposerSelector_Expecter) Copy() *ProposerSelector_Copy_Call {
	return &ProposerSelector_Copy_Call{Call: _e.mock.On("Copy")}
}

func (_c *ProposerSelector_Copy_Call) Run(run func()) *ProposerSelector_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProposerSelector_Copy_Call) Return(proposerSelector selectproposer.ProposerSelector) *ProposerSelector_Copy_Call {
	_c.Call.Return(proposerSelector)
	return _c
}

func (_c *ProposerSelector_Copy_Call) RunAndReturn(run func() selectproposer.ProposerSelector) *ProposerSelector_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// GetProposer provides a mock function for the type ProposerSelector
func (_mock *ProposerSelector) GetProposer(height int64, round int32) (*types.Validator, error) {
	ret := _mock.Called(height, round)

	if len(ret) == 0 {
		panic("no return value specified for GetProposer")
	}

	var r0 *types.Validator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64, int32) (*types.Validator, error)); ok {
		return returnFunc(height, round)
	}
	if returnFunc, ok := ret.Get(0).(func(int64, int32) *types.Validator); ok {
		r0 = returnFunc(height, round)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Validator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64, int32) error); ok {
		r1 = returnFunc(height, round)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProposerSelector_GetProposer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposer'
type ProposerSelector_GetProposer_Call struct {
	*mock.Call
}

// GetProposer is a helper method to define mock.On call
//   - height
//   - round
func (_e *ProposerSelector_Expecter) GetProposer(height interface{}, round interface{}) *ProposerSelector_GetProposer_Call {
	return &ProposerSelector_GetProposer_Call{Call: _e.mock.On("GetProposer", height, round)}
}

func (_c *ProposerSelector_GetProposer_Call) Run(run func(height int64, round int32)) *ProposerSelector_GetProposer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int32))
	})
	return _c
}

func (_c *ProposerSelector_GetProposer_Call) Return(validator *types.Validator, err error) *ProposerSelector_GetProposer_Call {
	_c.Call.Return(validator, err)
	return _c
}

func (_c *ProposerSelector_GetProposer_Call) RunAndReturn(run func(height int64, round int32) (*types.Validator, error)) *ProposerSelector_GetProposer_Call {
	_c.Call.Return(run)
	return _c
}

// MustGetProposer provides a mock function for the type ProposerSelector
func (_mock *ProposerSelector) MustGetProposer(height int64, round int32) *types.Validator {
	ret := _mock.Called(height, round)

	if len(ret) == 0 {
		panic("no return value specified for MustGetProposer")
	}

	var r0 *types.Validator
	if returnFunc, ok := ret.Get(0).(func(int64, int32) *types.Validator); ok {
		r0 = returnFunc(height, round)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Validator)
		}
	}
	return r0
}

// ProposerSelector_MustGetProposer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustGetProposer'
type ProposerSelector_MustGetProposer_Call struct {
	*mock.Call
}

// MustGetProposer is a helper method to define mock.On call
//   - height
//   - round
func (_e *ProposerSelector_Expecter) MustGetProposer(height interface{}, round interface{}) *ProposerSelector_MustGetProposer_Call {
	return &ProposerSelector_MustGetProposer_Call{Call: _e.mock.On("MustGetProposer", height, round)}
}

func (_c *ProposerSelector_MustGetProposer_Call) Run(run func(height int64, round int32)) *ProposerSelector_MustGetProposer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int32))
	})
	return _c
}

func (_c *ProposerSelector_MustGetProposer_Call) Return(validator *types.Validator) *ProposerSelector_MustGetProposer_Call {
	_c.Call.Return(validator)
	return _c
}

func (_c *ProposerSelector_MustGetProposer_Call) RunAndReturn(run func(height int64, round int32) *types.Validator) *ProposerSelector_MustGetProposer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateHeightRound provides a mock function for the type ProposerSelector
func (_mock *ProposerSelector) UpdateHeightRound(height int64, round int32) error {
	ret := _mock.Called(height, round)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHeightRound")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, int32) error); ok {
		r0 = returnFunc(height, round)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ProposerSelector_UpdateHeightRound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateHeightRound'
type ProposerSelector_UpdateHeightRound_Call struct {
	*mock.Call
}

// UpdateHeightRound is a helper method to define mock.On call
//   - height
//   - round
func (_e *ProposerSelector_Expecter) UpdateHeightRound(height interface{}, round interface{}) *ProposerSelector_UpdateHeightRound_Call {
	return &ProposerSelector_UpdateHeightRound_Call{Call: _e.mock.On("UpdateHeightRound", height, round)}
}

func (_c *ProposerSelector_UpdateHeightRound_Call) Run(run func(height int64, round int32)) *ProposerSelector_UpdateHeightRound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int32))
	})
	return _c
}

func (_c *ProposerSelector_UpdateHeightRound_Call) Return(err error) *ProposerSelector_UpdateHeightRound_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProposerSelector_UpdateHeightRound_Call) RunAndReturn(run func(height int64, round int32) error) *ProposerSelector_UpdateHeightRound_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorSet provides a mock function for the type ProposerSelector
func (_mock *ProposerSelector) ValidatorSet() *types.ValidatorSet {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidatorSet")
	}

	var r0 *types.ValidatorSet
	if returnFunc, ok := ret.Get(0).(func() *types.ValidatorSet); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ValidatorSet)
		}
	}
	return r0
}

// ProposerSelector_ValidatorSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorSet'
type ProposerSelector_ValidatorSet_Call struct {
	*mock.Call
}

// ValidatorSet is a helper method to define mock.On call
func (_e *ProposerSelector_Expecter) ValidatorSet() *ProposerSelector_ValidatorSet_Call {
	return &ProposerSelector_ValidatorSet_Call{Call: _e.mock.On("ValidatorSet")}
}

func (_c *ProposerSelector_ValidatorSet_Call) Run(run func()) *ProposerSelector_ValidatorSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProposerSelector_ValidatorSet_Call) Return(validatorSet *types.ValidatorSet) *ProposerSelector_ValidatorSet_Call {
	_c.Call.Return(validatorSet)
	return _c
}

func (_c *ProposerSelector_ValidatorSet_Call) RunAndReturn(run func() *types.ValidatorSet) *ProposerSelector_ValidatorSet_Call {
	_c.Call.Return(run)
	return _c
}
