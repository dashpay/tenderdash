// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	selectproposer "github.com/dashpay/tenderdash/internal/consensus/versioned/selectproposer"
	types "github.com/dashpay/tenderdash/types"
	mock "github.com/stretchr/testify/mock"
)

// ProposerSelector is an autogenerated mock type for the ProposerSelector type
type ProposerSelector struct {
	mock.Mock
}

// Copy provides a mock function with given fields:
func (_m *ProposerSelector) Copy() selectproposer.ProposerSelector {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 selectproposer.ProposerSelector
	if rf, ok := ret.Get(0).(func() selectproposer.ProposerSelector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(selectproposer.ProposerSelector)
		}
	}

	return r0
}

// GetProposer provides a mock function with given fields: height, round
func (_m *ProposerSelector) GetProposer(height int64, round int32) (*types.Validator, error) {
	ret := _m.Called(height, round)

	if len(ret) == 0 {
		panic("no return value specified for GetProposer")
	}

	var r0 *types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int32) (*types.Validator, error)); ok {
		return rf(height, round)
	}
	if rf, ok := ret.Get(0).(func(int64, int32) *types.Validator); ok {
		r0 = rf(height, round)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int32) error); ok {
		r1 = rf(height, round)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MustGetProposer provides a mock function with given fields: height, round
func (_m *ProposerSelector) MustGetProposer(height int64, round int32) *types.Validator {
	ret := _m.Called(height, round)

	if len(ret) == 0 {
		panic("no return value specified for MustGetProposer")
	}

	var r0 *types.Validator
	if rf, ok := ret.Get(0).(func(int64, int32) *types.Validator); ok {
		r0 = rf(height, round)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Validator)
		}
	}

	return r0
}

// UpdateHeightRound provides a mock function with given fields: height, round
func (_m *ProposerSelector) UpdateHeightRound(height int64, round int32) error {
	ret := _m.Called(height, round)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHeightRound")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int32) error); ok {
		r0 = rf(height, round)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatorSet provides a mock function with given fields:
func (_m *ProposerSelector) ValidatorSet() *types.ValidatorSet {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidatorSet")
	}

	var r0 *types.ValidatorSet
	if rf, ok := ret.Get(0).(func() *types.ValidatorSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ValidatorSet)
		}
	}

	return r0
}

// NewProposerSelector creates a new instance of ProposerSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProposerSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProposerSelector {
	mock := &ProposerSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
