// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dashpay/tenderdash/types"
	mock "github.com/stretchr/testify/mock"
)

// NewConsensusStateProvider creates a new instance of ConsensusStateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsensusStateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsensusStateProvider {
	mock := &ConsensusStateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConsensusStateProvider is an autogenerated mock type for the ConsensusStateProvider type
type ConsensusStateProvider struct {
	mock.Mock
}

type ConsensusStateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsensusStateProvider) EXPECT() *ConsensusStateProvider_Expecter {
	return &ConsensusStateProvider_Expecter{mock: &_m.Mock}
}

// GetCurrentHeight provides a mock function for the type ConsensusStateProvider
func (_mock *ConsensusStateProvider) GetCurrentHeight() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentHeight")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// ConsensusStateProvider_GetCurrentHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentHeight'
type ConsensusStateProvider_GetCurrentHeight_Call struct {
	*mock.Call
}

// GetCurrentHeight is a helper method to define mock.On call
func (_e *ConsensusStateProvider_Expecter) GetCurrentHeight() *ConsensusStateProvider_GetCurrentHeight_Call {
	return &ConsensusStateProvider_GetCurrentHeight_Call{Call: _e.mock.On("GetCurrentHeight")}
}

func (_c *ConsensusStateProvider_GetCurrentHeight_Call) Run(run func()) *ConsensusStateProvider_GetCurrentHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsensusStateProvider_GetCurrentHeight_Call) Return(n int64) *ConsensusStateProvider_GetCurrentHeight_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *ConsensusStateProvider_GetCurrentHeight_Call) RunAndReturn(run func() int64) *ConsensusStateProvider_GetCurrentHeight_Call {
	_c.Call.Return(run)
	return _c
}

// PublishCommitEvent provides a mock function for the type ConsensusStateProvider
func (_mock *ConsensusStateProvider) PublishCommitEvent(commit *types.Commit) error {
	ret := _mock.Called(commit)

	if len(ret) == 0 {
		panic("no return value specified for PublishCommitEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*types.Commit) error); ok {
		r0 = returnFunc(commit)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConsensusStateProvider_PublishCommitEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishCommitEvent'
type ConsensusStateProvider_PublishCommitEvent_Call struct {
	*mock.Call
}

// PublishCommitEvent is a helper method to define mock.On call
//   - commit
func (_e *ConsensusStateProvider_Expecter) PublishCommitEvent(commit interface{}) *ConsensusStateProvider_PublishCommitEvent_Call {
	return &ConsensusStateProvider_PublishCommitEvent_Call{Call: _e.mock.On("PublishCommitEvent", commit)}
}

func (_c *ConsensusStateProvider_PublishCommitEvent_Call) Run(run func(commit *types.Commit)) *ConsensusStateProvider_PublishCommitEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Commit))
	})
	return _c
}

func (_c *ConsensusStateProvider_PublishCommitEvent_Call) Return(err error) *ConsensusStateProvider_PublishCommitEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConsensusStateProvider_PublishCommitEvent_Call) RunAndReturn(run func(commit *types.Commit) error) *ConsensusStateProvider_PublishCommitEvent_Call {
	_c.Call.Return(run)
	return _c
}
