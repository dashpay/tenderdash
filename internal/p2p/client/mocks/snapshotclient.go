// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dashpay/tenderdash/libs/promise"
	"github.com/dashpay/tenderdash/proto/tendermint/statesync"
	"github.com/dashpay/tenderdash/types"
	mock "github.com/stretchr/testify/mock"
)

// NewSnapshotClient creates a new instance of SnapshotClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnapshotClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SnapshotClient {
	mock := &SnapshotClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SnapshotClient is an autogenerated mock type for the SnapshotClient type
type SnapshotClient struct {
	mock.Mock
}

type SnapshotClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SnapshotClient) EXPECT() *SnapshotClient_Expecter {
	return &SnapshotClient_Expecter{mock: &_m.Mock}
}

// GetChunk provides a mock function for the type SnapshotClient
func (_mock *SnapshotClient) GetChunk(ctx context.Context, peerID types.NodeID, height uint64, format uint32, index uint32) (*promise.Promise[*statesync.ChunkResponse], error) {
	ret := _mock.Called(ctx, peerID, height, format, index)

	if len(ret) == 0 {
		panic("no return value specified for GetChunk")
	}

	var r0 *promise.Promise[*statesync.ChunkResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NodeID, uint64, uint32, uint32) (*promise.Promise[*statesync.ChunkResponse], error)); ok {
		return returnFunc(ctx, peerID, height, format, index)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NodeID, uint64, uint32, uint32) *promise.Promise[*statesync.ChunkResponse]); ok {
		r0 = returnFunc(ctx, peerID, height, format, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise[*statesync.ChunkResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.NodeID, uint64, uint32, uint32) error); ok {
		r1 = returnFunc(ctx, peerID, height, format, index)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SnapshotClient_GetChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChunk'
type SnapshotClient_GetChunk_Call struct {
	*mock.Call
}

// GetChunk is a helper method to define mock.On call
//   - ctx
//   - peerID
//   - height
//   - format
//   - index
func (_e *SnapshotClient_Expecter) GetChunk(ctx interface{}, peerID interface{}, height interface{}, format interface{}, index interface{}) *SnapshotClient_GetChunk_Call {
	return &SnapshotClient_GetChunk_Call{Call: _e.mock.On("GetChunk", ctx, peerID, height, format, index)}
}

func (_c *SnapshotClient_GetChunk_Call) Run(run func(ctx context.Context, peerID types.NodeID, height uint64, format uint32, index uint32)) *SnapshotClient_GetChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NodeID), args[2].(uint64), args[3].(uint32), args[4].(uint32))
	})
	return _c
}

func (_c *SnapshotClient_GetChunk_Call) Return(promise1 *promise.Promise[*statesync.ChunkResponse], err error) *SnapshotClient_GetChunk_Call {
	_c.Call.Return(promise1, err)
	return _c
}

func (_c *SnapshotClient_GetChunk_Call) RunAndReturn(run func(ctx context.Context, peerID types.NodeID, height uint64, format uint32, index uint32) (*promise.Promise[*statesync.ChunkResponse], error)) *SnapshotClient_GetChunk_Call {
	_c.Call.Return(run)
	return _c
}

// GetLightBlock provides a mock function for the type SnapshotClient
func (_mock *SnapshotClient) GetLightBlock(ctx context.Context, peerID types.NodeID, height uint64) (*promise.Promise[*statesync.LightBlockResponse], error) {
	ret := _mock.Called(ctx, peerID, height)

	if len(ret) == 0 {
		panic("no return value specified for GetLightBlock")
	}

	var r0 *promise.Promise[*statesync.LightBlockResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NodeID, uint64) (*promise.Promise[*statesync.LightBlockResponse], error)); ok {
		return returnFunc(ctx, peerID, height)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NodeID, uint64) *promise.Promise[*statesync.LightBlockResponse]); ok {
		r0 = returnFunc(ctx, peerID, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise[*statesync.LightBlockResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.NodeID, uint64) error); ok {
		r1 = returnFunc(ctx, peerID, height)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SnapshotClient_GetLightBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLightBlock'
type SnapshotClient_GetLightBlock_Call struct {
	*mock.Call
}

// GetLightBlock is a helper method to define mock.On call
//   - ctx
//   - peerID
//   - height
func (_e *SnapshotClient_Expecter) GetLightBlock(ctx interface{}, peerID interface{}, height interface{}) *SnapshotClient_GetLightBlock_Call {
	return &SnapshotClient_GetLightBlock_Call{Call: _e.mock.On("GetLightBlock", ctx, peerID, height)}
}

func (_c *SnapshotClient_GetLightBlock_Call) Run(run func(ctx context.Context, peerID types.NodeID, height uint64)) *SnapshotClient_GetLightBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NodeID), args[2].(uint64))
	})
	return _c
}

func (_c *SnapshotClient_GetLightBlock_Call) Return(promise1 *promise.Promise[*statesync.LightBlockResponse], err error) *SnapshotClient_GetLightBlock_Call {
	_c.Call.Return(promise1, err)
	return _c
}

func (_c *SnapshotClient_GetLightBlock_Call) RunAndReturn(run func(ctx context.Context, peerID types.NodeID, height uint64) (*promise.Promise[*statesync.LightBlockResponse], error)) *SnapshotClient_GetLightBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetParams provides a mock function for the type SnapshotClient
func (_mock *SnapshotClient) GetParams(ctx context.Context, peerID types.NodeID, height uint64) (*promise.Promise[*statesync.ParamsResponse], error) {
	ret := _mock.Called(ctx, peerID, height)

	if len(ret) == 0 {
		panic("no return value specified for GetParams")
	}

	var r0 *promise.Promise[*statesync.ParamsResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NodeID, uint64) (*promise.Promise[*statesync.ParamsResponse], error)); ok {
		return returnFunc(ctx, peerID, height)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NodeID, uint64) *promise.Promise[*statesync.ParamsResponse]); ok {
		r0 = returnFunc(ctx, peerID, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise[*statesync.ParamsResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.NodeID, uint64) error); ok {
		r1 = returnFunc(ctx, peerID, height)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SnapshotClient_GetParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParams'
type SnapshotClient_GetParams_Call struct {
	*mock.Call
}

// GetParams is a helper method to define mock.On call
//   - ctx
//   - peerID
//   - height
func (_e *SnapshotClient_Expecter) GetParams(ctx interface{}, peerID interface{}, height interface{}) *SnapshotClient_GetParams_Call {
	return &SnapshotClient_GetParams_Call{Call: _e.mock.On("GetParams", ctx, peerID, height)}
}

func (_c *SnapshotClient_GetParams_Call) Run(run func(ctx context.Context, peerID types.NodeID, height uint64)) *SnapshotClient_GetParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NodeID), args[2].(uint64))
	})
	return _c
}

func (_c *SnapshotClient_GetParams_Call) Return(promise1 *promise.Promise[*statesync.ParamsResponse], err error) *SnapshotClient_GetParams_Call {
	_c.Call.Return(promise1, err)
	return _c
}

func (_c *SnapshotClient_GetParams_Call) RunAndReturn(run func(ctx context.Context, peerID types.NodeID, height uint64) (*promise.Promise[*statesync.ParamsResponse], error)) *SnapshotClient_GetParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetSnapshots provides a mock function for the type SnapshotClient
func (_mock *SnapshotClient) GetSnapshots(ctx context.Context, peerID types.NodeID) error {
	ret := _mock.Called(ctx, peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshots")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NodeID) error); ok {
		r0 = returnFunc(ctx, peerID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SnapshotClient_GetSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnapshots'
type SnapshotClient_GetSnapshots_Call struct {
	*mock.Call
}

// GetSnapshots is a helper method to define mock.On call
//   - ctx
//   - peerID
func (_e *SnapshotClient_Expecter) GetSnapshots(ctx interface{}, peerID interface{}) *SnapshotClient_GetSnapshots_Call {
	return &SnapshotClient_GetSnapshots_Call{Call: _e.mock.On("GetSnapshots", ctx, peerID)}
}

func (_c *SnapshotClient_GetSnapshots_Call) Run(run func(ctx context.Context, peerID types.NodeID)) *SnapshotClient_GetSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NodeID))
	})
	return _c
}

func (_c *SnapshotClient_GetSnapshots_Call) Return(err error) *SnapshotClient_GetSnapshots_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SnapshotClient_GetSnapshots_Call) RunAndReturn(run func(ctx context.Context, peerID types.NodeID) error) *SnapshotClient_GetSnapshots_Call {
	_c.Call.Return(run)
	return _c
}
