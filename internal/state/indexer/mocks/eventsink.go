// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dashpay/tenderdash/abci/types"
	"github.com/dashpay/tenderdash/internal/pubsub/query"
	"github.com/dashpay/tenderdash/internal/state/indexer"
	types0 "github.com/dashpay/tenderdash/types"
	mock "github.com/stretchr/testify/mock"
)

// NewEventSink creates a new instance of EventSink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventSink(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventSink {
	mock := &EventSink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// EventSink is an autogenerated mock type for the EventSink type
type EventSink struct {
	mock.Mock
}

type EventSink_Expecter struct {
	mock *mock.Mock
}

func (_m *EventSink) EXPECT() *EventSink_Expecter {
	return &EventSink_Expecter{mock: &_m.Mock}
}

// GetTxByHash provides a mock function for the type EventSink
func (_mock *EventSink) GetTxByHash(bytes []byte) (*types.TxResult, error) {
	ret := _mock.Called(bytes)

	if len(ret) == 0 {
		panic("no return value specified for GetTxByHash")
	}

	var r0 *types.TxResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (*types.TxResult, error)); ok {
		return returnFunc(bytes)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) *types.TxResult); ok {
		r0 = returnFunc(bytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TxResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(bytes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// EventSink_GetTxByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxByHash'
type EventSink_GetTxByHash_Call struct {
	*mock.Call
}

// GetTxByHash is a helper method to define mock.On call
//   - bytes
func (_e *EventSink_Expecter) GetTxByHash(bytes interface{}) *EventSink_GetTxByHash_Call {
	return &EventSink_GetTxByHash_Call{Call: _e.mock.On("GetTxByHash", bytes)}
}

func (_c *EventSink_GetTxByHash_Call) Run(run func(bytes []byte)) *EventSink_GetTxByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *EventSink_GetTxByHash_Call) Return(txResult *types.TxResult, err error) *EventSink_GetTxByHash_Call {
	_c.Call.Return(txResult, err)
	return _c
}

func (_c *EventSink_GetTxByHash_Call) RunAndReturn(run func(bytes []byte) (*types.TxResult, error)) *EventSink_GetTxByHash_Call {
	_c.Call.Return(run)
	return _c
}

// HasBlock provides a mock function for the type EventSink
func (_mock *EventSink) HasBlock(n int64) (bool, error) {
	ret := _mock.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for HasBlock")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return returnFunc(n)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = returnFunc(n)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// EventSink_HasBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasBlock'
type EventSink_HasBlock_Call struct {
	*mock.Call
}

// HasBlock is a helper method to define mock.On call
//   - n
func (_e *EventSink_Expecter) HasBlock(n interface{}) *EventSink_HasBlock_Call {
	return &EventSink_HasBlock_Call{Call: _e.mock.On("HasBlock", n)}
}

func (_c *EventSink_HasBlock_Call) Run(run func(n int64)) *EventSink_HasBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *EventSink_HasBlock_Call) Return(b bool, err error) *EventSink_HasBlock_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *EventSink_HasBlock_Call) RunAndReturn(run func(n int64) (bool, error)) *EventSink_HasBlock_Call {
	_c.Call.Return(run)
	return _c
}

// IndexBlockEvents provides a mock function for the type EventSink
func (_mock *EventSink) IndexBlockEvents(eventDataNewBlockHeader types0.EventDataNewBlockHeader) error {
	ret := _mock.Called(eventDataNewBlockHeader)

	if len(ret) == 0 {
		panic("no return value specified for IndexBlockEvents")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types0.EventDataNewBlockHeader) error); ok {
		r0 = returnFunc(eventDataNewBlockHeader)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EventSink_IndexBlockEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexBlockEvents'
type EventSink_IndexBlockEvents_Call struct {
	*mock.Call
}

// IndexBlockEvents is a helper method to define mock.On call
//   - eventDataNewBlockHeader
func (_e *EventSink_Expecter) IndexBlockEvents(eventDataNewBlockHeader interface{}) *EventSink_IndexBlockEvents_Call {
	return &EventSink_IndexBlockEvents_Call{Call: _e.mock.On("IndexBlockEvents", eventDataNewBlockHeader)}
}

func (_c *EventSink_IndexBlockEvents_Call) Run(run func(eventDataNewBlockHeader types0.EventDataNewBlockHeader)) *EventSink_IndexBlockEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types0.EventDataNewBlockHeader))
	})
	return _c
}

func (_c *EventSink_IndexBlockEvents_Call) Return(err error) *EventSink_IndexBlockEvents_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EventSink_IndexBlockEvents_Call) RunAndReturn(run func(eventDataNewBlockHeader types0.EventDataNewBlockHeader) error) *EventSink_IndexBlockEvents_Call {
	_c.Call.Return(run)
	return _c
}

// IndexTxEvents provides a mock function for the type EventSink
func (_mock *EventSink) IndexTxEvents(txResults []*types.TxResult) error {
	ret := _mock.Called(txResults)

	if len(ret) == 0 {
		panic("no return value specified for IndexTxEvents")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]*types.TxResult) error); ok {
		r0 = returnFunc(txResults)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EventSink_IndexTxEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexTxEvents'
type EventSink_IndexTxEvents_Call struct {
	*mock.Call
}

// IndexTxEvents is a helper method to define mock.On call
//   - txResults
func (_e *EventSink_Expecter) IndexTxEvents(txResults interface{}) *EventSink_IndexTxEvents_Call {
	return &EventSink_IndexTxEvents_Call{Call: _e.mock.On("IndexTxEvents", txResults)}
}

func (_c *EventSink_IndexTxEvents_Call) Run(run func(txResults []*types.TxResult)) *EventSink_IndexTxEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*types.TxResult))
	})
	return _c
}

func (_c *EventSink_IndexTxEvents_Call) Return(err error) *EventSink_IndexTxEvents_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EventSink_IndexTxEvents_Call) RunAndReturn(run func(txResults []*types.TxResult) error) *EventSink_IndexTxEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SearchBlockEvents provides a mock function for the type EventSink
func (_mock *EventSink) SearchBlockEvents(context1 context.Context, query1 *query.Query) ([]int64, error) {
	ret := _mock.Called(context1, query1)

	if len(ret) == 0 {
		panic("no return value specified for SearchBlockEvents")
	}

	var r0 []int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.Query) ([]int64, error)); ok {
		return returnFunc(context1, query1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.Query) []int64); ok {
		r0 = returnFunc(context1, query1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.Query) error); ok {
		r1 = returnFunc(context1, query1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// EventSink_SearchBlockEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchBlockEvents'
type EventSink_SearchBlockEvents_Call struct {
	*mock.Call
}

// SearchBlockEvents is a helper method to define mock.On call
//   - context1
//   - query1
func (_e *EventSink_Expecter) SearchBlockEvents(context1 interface{}, query1 interface{}) *EventSink_SearchBlockEvents_Call {
	return &EventSink_SearchBlockEvents_Call{Call: _e.mock.On("SearchBlockEvents", context1, query1)}
}

func (_c *EventSink_SearchBlockEvents_Call) Run(run func(context1 context.Context, query1 *query.Query)) *EventSink_SearchBlockEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*query.Query))
	})
	return _c
}

func (_c *EventSink_SearchBlockEvents_Call) Return(int64s []int64, err error) *EventSink_SearchBlockEvents_Call {
	_c.Call.Return(int64s, err)
	return _c
}

func (_c *EventSink_SearchBlockEvents_Call) RunAndReturn(run func(context1 context.Context, query1 *query.Query) ([]int64, error)) *EventSink_SearchBlockEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTxEvents provides a mock function for the type EventSink
func (_mock *EventSink) SearchTxEvents(context1 context.Context, query1 *query.Query) ([]*types.TxResult, error) {
	ret := _mock.Called(context1, query1)

	if len(ret) == 0 {
		panic("no return value specified for SearchTxEvents")
	}

	var r0 []*types.TxResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.Query) ([]*types.TxResult, error)); ok {
		return returnFunc(context1, query1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *query.Query) []*types.TxResult); ok {
		r0 = returnFunc(context1, query1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.TxResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *query.Query) error); ok {
		r1 = returnFunc(context1, query1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// EventSink_SearchTxEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTxEvents'
type EventSink_SearchTxEvents_Call struct {
	*mock.Call
}

// SearchTxEvents is a helper method to define mock.On call
//   - context1
//   - query1
func (_e *EventSink_Expecter) SearchTxEvents(context1 interface{}, query1 interface{}) *EventSink_SearchTxEvents_Call {
	return &EventSink_SearchTxEvents_Call{Call: _e.mock.On("SearchTxEvents", context1, query1)}
}

func (_c *EventSink_SearchTxEvents_Call) Run(run func(context1 context.Context, query1 *query.Query)) *EventSink_SearchTxEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*query.Query))
	})
	return _c
}

func (_c *EventSink_SearchTxEvents_Call) Return(txResults []*types.TxResult, err error) *EventSink_SearchTxEvents_Call {
	_c.Call.Return(txResults, err)
	return _c
}

func (_c *EventSink_SearchTxEvents_Call) RunAndReturn(run func(context1 context.Context, query1 *query.Query) ([]*types.TxResult, error)) *EventSink_SearchTxEvents_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type EventSink
func (_mock *EventSink) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EventSink_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type EventSink_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *EventSink_Expecter) Stop() *EventSink_Stop_Call {
	return &EventSink_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *EventSink_Stop_Call) Run(run func()) *EventSink_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventSink_Stop_Call) Return(err error) *EventSink_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EventSink_Stop_Call) RunAndReturn(run func() error) *EventSink_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type EventSink
func (_mock *EventSink) Type() indexer.EventSinkType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 indexer.EventSinkType
	if returnFunc, ok := ret.Get(0).(func() indexer.EventSinkType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(indexer.EventSinkType)
	}
	return r0
}

// EventSink_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type EventSink_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *EventSink_Expecter) Type() *EventSink_Type_Call {
	return &EventSink_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *EventSink_Type_Call) Run(run func()) *EventSink_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventSink_Type_Call) Return(eventSinkType indexer.EventSinkType) *EventSink_Type_Call {
	_c.Call.Return(eventSinkType)
	return _c
}

func (_c *EventSink_Type_Call) RunAndReturn(run func() indexer.EventSinkType) *EventSink_Type_Call {
	_c.Call.Return(run)
	return _c
}
