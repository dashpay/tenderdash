// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dashpay/tenderdash/internal/state"
	"github.com/dashpay/tenderdash/types"
	mock "github.com/stretchr/testify/mock"
)

// NewEvidencePool creates a new instance of EvidencePool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvidencePool(t interface {
	mock.TestingT
	Cleanup(func())
}) *EvidencePool {
	mock := &EvidencePool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// EvidencePool is an autogenerated mock type for the EvidencePool type
type EvidencePool struct {
	mock.Mock
}

type EvidencePool_Expecter struct {
	mock *mock.Mock
}

func (_m *EvidencePool) EXPECT() *EvidencePool_Expecter {
	return &EvidencePool_Expecter{mock: &_m.Mock}
}

// AddEvidence provides a mock function for the type EvidencePool
func (_mock *EvidencePool) AddEvidence(context1 context.Context, evidence types.Evidence) error {
	ret := _mock.Called(context1, evidence)

	if len(ret) == 0 {
		panic("no return value specified for AddEvidence")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Evidence) error); ok {
		r0 = returnFunc(context1, evidence)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EvidencePool_AddEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvidence'
type EvidencePool_AddEvidence_Call struct {
	*mock.Call
}

// AddEvidence is a helper method to define mock.On call
//   - context1
//   - evidence
func (_e *EvidencePool_Expecter) AddEvidence(context1 interface{}, evidence interface{}) *EvidencePool_AddEvidence_Call {
	return &EvidencePool_AddEvidence_Call{Call: _e.mock.On("AddEvidence", context1, evidence)}
}

func (_c *EvidencePool_AddEvidence_Call) Run(run func(context1 context.Context, evidence types.Evidence)) *EvidencePool_AddEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Evidence))
	})
	return _c
}

func (_c *EvidencePool_AddEvidence_Call) Return(err error) *EvidencePool_AddEvidence_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EvidencePool_AddEvidence_Call) RunAndReturn(run func(context1 context.Context, evidence types.Evidence) error) *EvidencePool_AddEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// CheckEvidence provides a mock function for the type EvidencePool
func (_mock *EvidencePool) CheckEvidence(context1 context.Context, evidenceList types.EvidenceList) error {
	ret := _mock.Called(context1, evidenceList)

	if len(ret) == 0 {
		panic("no return value specified for CheckEvidence")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.EvidenceList) error); ok {
		r0 = returnFunc(context1, evidenceList)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EvidencePool_CheckEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEvidence'
type EvidencePool_CheckEvidence_Call struct {
	*mock.Call
}

// CheckEvidence is a helper method to define mock.On call
//   - context1
//   - evidenceList
func (_e *EvidencePool_Expecter) CheckEvidence(context1 interface{}, evidenceList interface{}) *EvidencePool_CheckEvidence_Call {
	return &EvidencePool_CheckEvidence_Call{Call: _e.mock.On("CheckEvidence", context1, evidenceList)}
}

func (_c *EvidencePool_CheckEvidence_Call) Run(run func(context1 context.Context, evidenceList types.EvidenceList)) *EvidencePool_CheckEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.EvidenceList))
	})
	return _c
}

func (_c *EvidencePool_CheckEvidence_Call) Return(err error) *EvidencePool_CheckEvidence_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EvidencePool_CheckEvidence_Call) RunAndReturn(run func(context1 context.Context, evidenceList types.EvidenceList) error) *EvidencePool_CheckEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// PendingEvidence provides a mock function for the type EvidencePool
func (_mock *EvidencePool) PendingEvidence(maxBytes int64) ([]types.Evidence, int64) {
	ret := _mock.Called(maxBytes)

	if len(ret) == 0 {
		panic("no return value specified for PendingEvidence")
	}

	var r0 []types.Evidence
	var r1 int64
	if returnFunc, ok := ret.Get(0).(func(int64) ([]types.Evidence, int64)); ok {
		return returnFunc(maxBytes)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) []types.Evidence); ok {
		r0 = returnFunc(maxBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Evidence)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) int64); ok {
		r1 = returnFunc(maxBytes)
	} else {
		r1 = ret.Get(1).(int64)
	}
	return r0, r1
}

// EvidencePool_PendingEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingEvidence'
type EvidencePool_PendingEvidence_Call struct {
	*mock.Call
}

// PendingEvidence is a helper method to define mock.On call
//   - maxBytes
func (_e *EvidencePool_Expecter) PendingEvidence(maxBytes interface{}) *EvidencePool_PendingEvidence_Call {
	return &EvidencePool_PendingEvidence_Call{Call: _e.mock.On("PendingEvidence", maxBytes)}
}

func (_c *EvidencePool_PendingEvidence_Call) Run(run func(maxBytes int64)) *EvidencePool_PendingEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *EvidencePool_PendingEvidence_Call) Return(ev []types.Evidence, size int64) *EvidencePool_PendingEvidence_Call {
	_c.Call.Return(ev, size)
	return _c
}

func (_c *EvidencePool_PendingEvidence_Call) RunAndReturn(run func(maxBytes int64) ([]types.Evidence, int64)) *EvidencePool_PendingEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type EvidencePool
func (_mock *EvidencePool) Update(context1 context.Context, state1 state.State, evidenceList types.EvidenceList) {
	_mock.Called(context1, state1, evidenceList)
	return
}

// EvidencePool_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type EvidencePool_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1
//   - state1
//   - evidenceList
func (_e *EvidencePool_Expecter) Update(context1 interface{}, state1 interface{}, evidenceList interface{}) *EvidencePool_Update_Call {
	return &EvidencePool_Update_Call{Call: _e.mock.On("Update", context1, state1, evidenceList)}
}

func (_c *EvidencePool_Update_Call) Run(run func(context1 context.Context, state1 state.State, evidenceList types.EvidenceList)) *EvidencePool_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.State), args[2].(types.EvidenceList))
	})
	return _c
}

func (_c *EvidencePool_Update_Call) Return() *EvidencePool_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *EvidencePool_Update_Call) RunAndReturn(run func(context1 context.Context, state1 state.State, evidenceList types.EvidenceList)) *EvidencePool_Update_Call {
	_c.Run(run)
	return _c
}
