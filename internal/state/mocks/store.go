// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dashpay/tenderdash/internal/consensus/versioned/selectproposer"
	"github.com/dashpay/tenderdash/internal/state"
	state0 "github.com/dashpay/tenderdash/proto/tendermint/state"
	"github.com/dashpay/tenderdash/types"
	mock "github.com/stretchr/testify/mock"
)

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// Bootstrap provides a mock function for the type Store
func (_mock *Store) Bootstrap(state1 state.State) error {
	ret := _mock.Called(state1)

	if len(ret) == 0 {
		panic("no return value specified for Bootstrap")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(state.State) error); ok {
		r0 = returnFunc(state1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_Bootstrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bootstrap'
type Store_Bootstrap_Call struct {
	*mock.Call
}

// Bootstrap is a helper method to define mock.On call
//   - state1 state.State
func (_e *Store_Expecter) Bootstrap(state1 interface{}) *Store_Bootstrap_Call {
	return &Store_Bootstrap_Call{Call: _e.mock.On("Bootstrap", state1)}
}

func (_c *Store_Bootstrap_Call) Run(run func(state1 state.State)) *Store_Bootstrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 state.State
		if args[0] != nil {
			arg0 = args[0].(state.State)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Store_Bootstrap_Call) Return(err error) *Store_Bootstrap_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_Bootstrap_Call) RunAndReturn(run func(state1 state.State) error) *Store_Bootstrap_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type Store
func (_mock *Store) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Store_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Store_Expecter) Close() *Store_Close_Call {
	return &Store_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Store_Close_Call) Run(run func()) *Store_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_Close_Call) Return(err error) *Store_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_Close_Call) RunAndReturn(run func() error) *Store_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function for the type Store
func (_mock *Store) Load() (state.State, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 state.State
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (state.State, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() state.State); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(state.State)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type Store_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *Store_Expecter) Load() *Store_Load_Call {
	return &Store_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *Store_Load_Call) Run(run func()) *Store_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_Load_Call) Return(state1 state.State, err error) *Store_Load_Call {
	_c.Call.Return(state1, err)
	return _c
}

func (_c *Store_Load_Call) RunAndReturn(run func() (state.State, error)) *Store_Load_Call {
	_c.Call.Return(run)
	return _c
}

// LoadABCIResponses provides a mock function for the type Store
func (_mock *Store) LoadABCIResponses(n int64) (*state0.ABCIResponses, error) {
	ret := _mock.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for LoadABCIResponses")
	}

	var r0 *state0.ABCIResponses
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (*state0.ABCIResponses, error)); ok {
		return returnFunc(n)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) *state0.ABCIResponses); ok {
		r0 = returnFunc(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state0.ABCIResponses)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_LoadABCIResponses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadABCIResponses'
type Store_LoadABCIResponses_Call struct {
	*mock.Call
}

// LoadABCIResponses is a helper method to define mock.On call
//   - n int64
func (_e *Store_Expecter) LoadABCIResponses(n interface{}) *Store_LoadABCIResponses_Call {
	return &Store_LoadABCIResponses_Call{Call: _e.mock.On("LoadABCIResponses", n)}
}

func (_c *Store_LoadABCIResponses_Call) Run(run func(n int64)) *Store_LoadABCIResponses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Store_LoadABCIResponses_Call) Return(aBCIResponses *state0.ABCIResponses, err error) *Store_LoadABCIResponses_Call {
	_c.Call.Return(aBCIResponses, err)
	return _c
}

func (_c *Store_LoadABCIResponses_Call) RunAndReturn(run func(n int64) (*state0.ABCIResponses, error)) *Store_LoadABCIResponses_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConsensusParams provides a mock function for the type Store
func (_mock *Store) LoadConsensusParams(n int64) (types.ConsensusParams, error) {
	ret := _mock.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for LoadConsensusParams")
	}

	var r0 types.ConsensusParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (types.ConsensusParams, error)); ok {
		return returnFunc(n)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) types.ConsensusParams); ok {
		r0 = returnFunc(n)
	} else {
		r0 = ret.Get(0).(types.ConsensusParams)
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_LoadConsensusParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConsensusParams'
type Store_LoadConsensusParams_Call struct {
	*mock.Call
}

// LoadConsensusParams is a helper method to define mock.On call
//   - n int64
func (_e *Store_Expecter) LoadConsensusParams(n interface{}) *Store_LoadConsensusParams_Call {
	return &Store_LoadConsensusParams_Call{Call: _e.mock.On("LoadConsensusParams", n)}
}

func (_c *Store_LoadConsensusParams_Call) Run(run func(n int64)) *Store_LoadConsensusParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Store_LoadConsensusParams_Call) Return(consensusParams types.ConsensusParams, err error) *Store_LoadConsensusParams_Call {
	_c.Call.Return(consensusParams, err)
	return _c
}

func (_c *Store_LoadConsensusParams_Call) RunAndReturn(run func(n int64) (types.ConsensusParams, error)) *Store_LoadConsensusParams_Call {
	_c.Call.Return(run)
	return _c
}

// LoadValidators provides a mock function for the type Store
func (_mock *Store) LoadValidators(n int64, blockStore selectproposer.BlockStore) (*types.ValidatorSet, error) {
	ret := _mock.Called(n, blockStore)

	if len(ret) == 0 {
		panic("no return value specified for LoadValidators")
	}

	var r0 *types.ValidatorSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64, selectproposer.BlockStore) (*types.ValidatorSet, error)); ok {
		return returnFunc(n, blockStore)
	}
	if returnFunc, ok := ret.Get(0).(func(int64, selectproposer.BlockStore) *types.ValidatorSet); ok {
		r0 = returnFunc(n, blockStore)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ValidatorSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64, selectproposer.BlockStore) error); ok {
		r1 = returnFunc(n, blockStore)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_LoadValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadValidators'
type Store_LoadValidators_Call struct {
	*mock.Call
}

// LoadValidators is a helper method to define mock.On call
//   - n int64
//   - blockStore selectproposer.BlockStore
func (_e *Store_Expecter) LoadValidators(n interface{}, blockStore interface{}) *Store_LoadValidators_Call {
	return &Store_LoadValidators_Call{Call: _e.mock.On("LoadValidators", n, blockStore)}
}

func (_c *Store_LoadValidators_Call) Run(run func(n int64, blockStore selectproposer.BlockStore)) *Store_LoadValidators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 selectproposer.BlockStore
		if args[1] != nil {
			arg1 = args[1].(selectproposer.BlockStore)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_LoadValidators_Call) Return(validatorSet *types.ValidatorSet, err error) *Store_LoadValidators_Call {
	_c.Call.Return(validatorSet, err)
	return _c
}

func (_c *Store_LoadValidators_Call) RunAndReturn(run func(n int64, blockStore selectproposer.BlockStore) (*types.ValidatorSet, error)) *Store_LoadValidators_Call {
	_c.Call.Return(run)
	return _c
}

// PruneStates provides a mock function for the type Store
func (_mock *Store) PruneStates(n int64) error {
	ret := _mock.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for PruneStates")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64) error); ok {
		r0 = returnFunc(n)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_PruneStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneStates'
type Store_PruneStates_Call struct {
	*mock.Call
}

// PruneStates is a helper method to define mock.On call
//   - n int64
func (_e *Store_Expecter) PruneStates(n interface{}) *Store_PruneStates_Call {
	return &Store_PruneStates_Call{Call: _e.mock.On("PruneStates", n)}
}

func (_c *Store_PruneStates_Call) Run(run func(n int64)) *Store_PruneStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Store_PruneStates_Call) Return(err error) *Store_PruneStates_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_PruneStates_Call) RunAndReturn(run func(n int64) error) *Store_PruneStates_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type Store
func (_mock *Store) Save(state1 state.State) error {
	ret := _mock.Called(state1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(state.State) error); ok {
		r0 = returnFunc(state1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Store_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - state1 state.State
func (_e *Store_Expecter) Save(state1 interface{}) *Store_Save_Call {
	return &Store_Save_Call{Call: _e.mock.On("Save", state1)}
}

func (_c *Store_Save_Call) Run(run func(state1 state.State)) *Store_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 state.State
		if args[0] != nil {
			arg0 = args[0].(state.State)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Store_Save_Call) Return(err error) *Store_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_Save_Call) RunAndReturn(run func(state1 state.State) error) *Store_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveABCIResponses provides a mock function for the type Store
func (_mock *Store) SaveABCIResponses(n int64, aBCIResponses state0.ABCIResponses) error {
	ret := _mock.Called(n, aBCIResponses)

	if len(ret) == 0 {
		panic("no return value specified for SaveABCIResponses")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, state0.ABCIResponses) error); ok {
		r0 = returnFunc(n, aBCIResponses)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_SaveABCIResponses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveABCIResponses'
type Store_SaveABCIResponses_Call struct {
	*mock.Call
}

// SaveABCIResponses is a helper method to define mock.On call
//   - n int64
//   - aBCIResponses state0.ABCIResponses
func (_e *Store_Expecter) SaveABCIResponses(n interface{}, aBCIResponses interface{}) *Store_SaveABCIResponses_Call {
	return &Store_SaveABCIResponses_Call{Call: _e.mock.On("SaveABCIResponses", n, aBCIResponses)}
}

func (_c *Store_SaveABCIResponses_Call) Run(run func(n int64, aBCIResponses state0.ABCIResponses)) *Store_SaveABCIResponses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 state0.ABCIResponses
		if args[1] != nil {
			arg1 = args[1].(state0.ABCIResponses)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_SaveABCIResponses_Call) Return(err error) *Store_SaveABCIResponses_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_SaveABCIResponses_Call) RunAndReturn(run func(n int64, aBCIResponses state0.ABCIResponses) error) *Store_SaveABCIResponses_Call {
	_c.Call.Return(run)
	return _c
}

// SaveValidatorSets provides a mock function for the type Store
func (_mock *Store) SaveValidatorSets(n int64, n1 int64, validatorSet *types.ValidatorSet) error {
	ret := _mock.Called(n, n1, validatorSet)

	if len(ret) == 0 {
		panic("no return value specified for SaveValidatorSets")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, int64, *types.ValidatorSet) error); ok {
		r0 = returnFunc(n, n1, validatorSet)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_SaveValidatorSets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveValidatorSets'
type Store_SaveValidatorSets_Call struct {
	*mock.Call
}

// SaveValidatorSets is a helper method to define mock.On call
//   - n int64
//   - n1 int64
//   - validatorSet *types.ValidatorSet
func (_e *Store_Expecter) SaveValidatorSets(n interface{}, n1 interface{}, validatorSet interface{}) *Store_SaveValidatorSets_Call {
	return &Store_SaveValidatorSets_Call{Call: _e.mock.On("SaveValidatorSets", n, n1, validatorSet)}
}

func (_c *Store_SaveValidatorSets_Call) Run(run func(n int64, n1 int64, validatorSet *types.ValidatorSet)) *Store_SaveValidatorSets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *types.ValidatorSet
		if args[2] != nil {
			arg2 = args[2].(*types.ValidatorSet)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Store_SaveValidatorSets_Call) Return(err error) *Store_SaveValidatorSets_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_SaveValidatorSets_Call) RunAndReturn(run func(n int64, n1 int64, validatorSet *types.ValidatorSet) error) *Store_SaveValidatorSets_Call {
	_c.Call.Return(run)
	return _c
}
