// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	peer "github.com/tendermint/tendermint/internal/peer"
	types "github.com/tendermint/tendermint/types"
)

// Store is an autogenerated mock type for the Store type
type Store[T interface{}] struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *Store[T]) All() []T {
	ret := _m.Called()

	var r0 []T
	if rf, ok := ret.Get(0).(func() []T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	return r0
}

// Get provides a mock function with given fields: peerID
func (_m *Store[T]) Get(peerID types.NodeID) (T, bool) {
	ret := _m.Called(peerID)

	var r0 T
	if rf, ok := ret.Get(0).(func(types.NodeID) T); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(T)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(types.NodeID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetAndRemove provides a mock function with given fields: peerID
func (_m *Store[T]) GetAndRemove(peerID types.NodeID) (T, bool) {
	ret := _m.Called(peerID)

	var r0 T
	if rf, ok := ret.Get(0).(func(types.NodeID) T); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(T)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(types.NodeID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Put provides a mock function with given fields: peerID, data
func (_m *Store[T]) Put(peerID types.NodeID, data T) {
	_m.Called(peerID, data)
}

// Query provides a mock function with given fields: spec, limit
func (_m *Store[T]) Query(spec peer.QueryFunc[T], limit int) []*T {
	ret := _m.Called(spec, limit)

	var r0 []*T
	if rf, ok := ret.Get(0).(func(peer.QueryFunc[T], int) []*T); ok {
		r0 = rf(spec, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	return r0
}

// Remove provides a mock function with given fields: peerID
func (_m *Store[T]) Remove(peerID types.NodeID) {
	_m.Called(peerID)
}

// Update provides a mock function with given fields: peerID, updates
func (_m *Store[T]) Update(peerID types.NodeID, updates ...peer.UpdateFunc[T]) {
	_va := make([]interface{}, len(updates))
	for _i := range updates {
		_va[_i] = updates[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, peerID)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore[T interface{}](t mockConstructorTestingTNewStore) *Store[T] {
	mock := &Store[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
