// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/dashpay/tenderdash/types"
	mock "github.com/stretchr/testify/mock"
)

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// ID provides a mock function for the type Provider
func (_mock *Provider) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Provider_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Provider_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Provider_Expecter) ID() *Provider_ID_Call {
	return &Provider_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Provider_ID_Call) Run(run func()) *Provider_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_ID_Call) Return(s string) *Provider_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Provider_ID_Call) RunAndReturn(run func() string) *Provider_ID_Call {
	_c.Call.Return(run)
	return _c
}

// LightBlock provides a mock function for the type Provider
func (_mock *Provider) LightBlock(ctx context.Context, height int64) (*types.LightBlock, error) {
	ret := _mock.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for LightBlock")
	}

	var r0 *types.LightBlock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*types.LightBlock, error)); ok {
		return returnFunc(ctx, height)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *types.LightBlock); ok {
		r0 = returnFunc(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LightBlock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, height)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Provider_LightBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LightBlock'
type Provider_LightBlock_Call struct {
	*mock.Call
}

// LightBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - height int64
func (_e *Provider_Expecter) LightBlock(ctx interface{}, height interface{}) *Provider_LightBlock_Call {
	return &Provider_LightBlock_Call{Call: _e.mock.On("LightBlock", ctx, height)}
}

func (_c *Provider_LightBlock_Call) Run(run func(ctx context.Context, height int64)) *Provider_LightBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Provider_LightBlock_Call) Return(lightBlock *types.LightBlock, err error) *Provider_LightBlock_Call {
	_c.Call.Return(lightBlock, err)
	return _c
}

func (_c *Provider_LightBlock_Call) RunAndReturn(run func(ctx context.Context, height int64) (*types.LightBlock, error)) *Provider_LightBlock_Call {
	_c.Call.Return(run)
	return _c
}

// ReportEvidence provides a mock function for the type Provider
func (_mock *Provider) ReportEvidence(context1 context.Context, evidence types.Evidence) error {
	ret := _mock.Called(context1, evidence)

	if len(ret) == 0 {
		panic("no return value specified for ReportEvidence")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Evidence) error); ok {
		r0 = returnFunc(context1, evidence)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Provider_ReportEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportEvidence'
type Provider_ReportEvidence_Call struct {
	*mock.Call
}

// ReportEvidence is a helper method to define mock.On call
//   - context1 context.Context
//   - evidence types.Evidence
func (_e *Provider_Expecter) ReportEvidence(context1 interface{}, evidence interface{}) *Provider_ReportEvidence_Call {
	return &Provider_ReportEvidence_Call{Call: _e.mock.On("ReportEvidence", context1, evidence)}
}

func (_c *Provider_ReportEvidence_Call) Run(run func(context1 context.Context, evidence types.Evidence)) *Provider_ReportEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.Evidence
		if args[1] != nil {
			arg1 = args[1].(types.Evidence)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Provider_ReportEvidence_Call) Return(err error) *Provider_ReportEvidence_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Provider_ReportEvidence_Call) RunAndReturn(run func(context1 context.Context, evidence types.Evidence) error) *Provider_ReportEvidence_Call {
	_c.Call.Return(run)
	return _c
}
