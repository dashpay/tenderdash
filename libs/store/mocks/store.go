// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	store "github.com/dashpay/tenderdash/libs/store"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store[K comparable, V any] struct {
	mock.Mock
}

type Store_Expecter[K comparable, V any] struct {
	mock *mock.Mock
}

func (_m *Store[K, V]) EXPECT() *Store_Expecter[K, V] {
	return &Store_Expecter[K, V]{mock: &_m.Mock}
}

// All provides a mock function with given fields:
func (_m *Store[K, V]) All() []V {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []V
	if rf, ok := ret.Get(0).(func() []V); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]V)
		}
	}

	return r0
}

// Store_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Store_All_Call[K comparable, V any] struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *Store_Expecter[K, V]) All() *Store_All_Call[K, V] {
	return &Store_All_Call[K, V]{Call: _e.mock.On("All")}
}

func (_c *Store_All_Call[K, V]) Run(run func()) *Store_All_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_All_Call[K, V]) Return(_a0 []V) *Store_All_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_All_Call[K, V]) RunAndReturn(run func() []V) *Store_All_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *Store[K, V]) Delete(key K) {
	_m.Called(key)
}

// Store_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Store_Delete_Call[K comparable, V any] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key K
func (_e *Store_Expecter[K, V]) Delete(key interface{}) *Store_Delete_Call[K, V] {
	return &Store_Delete_Call[K, V]{Call: _e.mock.On("Delete", key)}
}

func (_c *Store_Delete_Call[K, V]) Run(run func(key K)) *Store_Delete_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *Store_Delete_Call[K, V]) Return() *Store_Delete_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *Store_Delete_Call[K, V]) RunAndReturn(run func(K)) *Store_Delete_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *Store[K, V]) Get(key K) (V, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 V
	var r1 bool
	if rf, ok := ret.Get(0).(func(K) (V, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(K) V); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(V)
	}

	if rf, ok := ret.Get(1).(func(K) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Store_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Store_Get_Call[K comparable, V any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key K
func (_e *Store_Expecter[K, V]) Get(key interface{}) *Store_Get_Call[K, V] {
	return &Store_Get_Call[K, V]{Call: _e.mock.On("Get", key)}
}

func (_c *Store_Get_Call[K, V]) Run(run func(key K)) *Store_Get_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *Store_Get_Call[K, V]) Return(_a0 V, _a1 bool) *Store_Get_Call[K, V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Get_Call[K, V]) RunAndReturn(run func(K) (V, bool)) *Store_Get_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetAndDelete provides a mock function with given fields: key
func (_m *Store[K, V]) GetAndDelete(key K) (V, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetAndDelete")
	}

	var r0 V
	var r1 bool
	if rf, ok := ret.Get(0).(func(K) (V, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(K) V); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(V)
	}

	if rf, ok := ret.Get(1).(func(K) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Store_GetAndDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAndDelete'
type Store_GetAndDelete_Call[K comparable, V any] struct {
	*mock.Call
}

// GetAndDelete is a helper method to define mock.On call
//   - key K
func (_e *Store_Expecter[K, V]) GetAndDelete(key interface{}) *Store_GetAndDelete_Call[K, V] {
	return &Store_GetAndDelete_Call[K, V]{Call: _e.mock.On("GetAndDelete", key)}
}

func (_c *Store_GetAndDelete_Call[K, V]) Run(run func(key K)) *Store_GetAndDelete_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *Store_GetAndDelete_Call[K, V]) Return(_a0 V, _a1 bool) *Store_GetAndDelete_Call[K, V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetAndDelete_Call[K, V]) RunAndReturn(run func(K) (V, bool)) *Store_GetAndDelete_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// IsZero provides a mock function with given fields:
func (_m *Store[K, V]) IsZero() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsZero")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Store_IsZero_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsZero'
type Store_IsZero_Call[K comparable, V any] struct {
	*mock.Call
}

// IsZero is a helper method to define mock.On call
func (_e *Store_Expecter[K, V]) IsZero() *Store_IsZero_Call[K, V] {
	return &Store_IsZero_Call[K, V]{Call: _e.mock.On("IsZero")}
}

func (_c *Store_IsZero_Call[K, V]) Run(run func()) *Store_IsZero_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_IsZero_Call[K, V]) Return(_a0 bool) *Store_IsZero_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_IsZero_Call[K, V]) RunAndReturn(run func() bool) *Store_IsZero_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *Store[K, V]) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Store_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type Store_Len_Call[K comparable, V any] struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *Store_Expecter[K, V]) Len() *Store_Len_Call[K, V] {
	return &Store_Len_Call[K, V]{Call: _e.mock.On("Len")}
}

func (_c *Store_Len_Call[K, V]) Run(run func()) *Store_Len_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_Len_Call[K, V]) Return(_a0 int) *Store_Len_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Len_Call[K, V]) RunAndReturn(run func() int) *Store_Len_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: key, data
func (_m *Store[K, V]) Put(key K, data V) {
	_m.Called(key, data)
}

// Store_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Store_Put_Call[K comparable, V any] struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key K
//   - data V
func (_e *Store_Expecter[K, V]) Put(key interface{}, data interface{}) *Store_Put_Call[K, V] {
	return &Store_Put_Call[K, V]{Call: _e.mock.On("Put", key, data)}
}

func (_c *Store_Put_Call[K, V]) Run(run func(key K, data V)) *Store_Put_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K), args[1].(V))
	})
	return _c
}

func (_c *Store_Put_Call[K, V]) Return() *Store_Put_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *Store_Put_Call[K, V]) RunAndReturn(run func(K, V)) *Store_Put_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: spec, limit
func (_m *Store[K, V]) Query(spec store.QueryFunc[K, V], limit int) []V {
	ret := _m.Called(spec, limit)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []V
	if rf, ok := ret.Get(0).(func(store.QueryFunc[K, V], int) []V); ok {
		r0 = rf(spec, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]V)
		}
	}

	return r0
}

// Store_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Store_Query_Call[K comparable, V any] struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - spec store.QueryFunc[K,V]
//   - limit int
func (_e *Store_Expecter[K, V]) Query(spec interface{}, limit interface{}) *Store_Query_Call[K, V] {
	return &Store_Query_Call[K, V]{Call: _e.mock.On("Query", spec, limit)}
}

func (_c *Store_Query_Call[K, V]) Run(run func(spec store.QueryFunc[K, V], limit int)) *Store_Query_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(store.QueryFunc[K, V]), args[1].(int))
	})
	return _c
}

func (_c *Store_Query_Call[K, V]) Return(_a0 []V) *Store_Query_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Query_Call[K, V]) RunAndReturn(run func(store.QueryFunc[K, V], int) []V) *Store_Query_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: key, updates
func (_m *Store[K, V]) Update(key K, updates ...store.UpdateFunc[K, V]) {
	_va := make([]interface{}, len(updates))
	for _i := range updates {
		_va[_i] = updates[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Store_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Store_Update_Call[K comparable, V any] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - key K
//   - updates ...store.UpdateFunc[K,V]
func (_e *Store_Expecter[K, V]) Update(key interface{}, updates ...interface{}) *Store_Update_Call[K, V] {
	return &Store_Update_Call[K, V]{Call: _e.mock.On("Update",
		append([]interface{}{key}, updates...)...)}
}

func (_c *Store_Update_Call[K, V]) Run(run func(key K, updates ...store.UpdateFunc[K, V])) *Store_Update_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]store.UpdateFunc[K, V], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(store.UpdateFunc[K, V])
			}
		}
		run(args[0].(K), variadicArgs...)
	})
	return _c
}

func (_c *Store_Update_Call[K, V]) Return() *Store_Update_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *Store_Update_Call[K, V]) RunAndReturn(run func(K, ...store.UpdateFunc[K, V])) *Store_Update_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore[K comparable, V any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Store[K, V] {
	mock := &Store[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
