// nolint:lll
package bls12381_test

import (
	"encoding/base64"
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/tendermint/tendermint/crypto"
	"github.com/tendermint/tendermint/crypto/bls12381"
	tmbytes "github.com/tendermint/tendermint/libs/bytes"
)

func TestSignAndValidateBLS12381(t *testing.T) {

	privKey := bls12381.GenPrivKey()
	pubKey := privKey.PubKey()

	msg := crypto.CRandBytes(128)
	sig, err := privKey.SignDigest(msg)
	require.Nil(t, err)

	// Test the signature
	assert.True(t, pubKey.VerifySignatureDigest(msg, sig))
}

func TestBLSAddress(t *testing.T) {
	decodedPrivateKeyBytes, err := base64.StdEncoding.DecodeString("RokcLOxJWTyBkh5HPbdIACng/B65M8a5PYH1Nw6xn70=")
	require.Nil(t, err)
	publicKeyBytesString := "F5BjXeh0DppqaxX7a3LzoWr6CXPZcZeba6VHYdbiUCxQ23b00mFD8FRZpCz9Ug1E"
	decodedPublicKeyBytes, err := base64.StdEncoding.DecodeString(publicKeyBytesString)
	require.Nil(t, err)
	decodedAddressBytes, err := hex.DecodeString("DDAD59BB10A10088C5A9CA219C3CF5BB4599B54E")
	require.Nil(t, err)
	privKey := bls12381.PrivKey(decodedPrivateKeyBytes)
	pubKey := privKey.PubKey()
	address := pubKey.Address()
	assert.EqualValues(t, decodedPublicKeyBytes, pubKey)
	assert.EqualValues(t, decodedAddressBytes, address)
}

func TestRecoverThresholdPublicKeyFromPublicKeys4(t *testing.T) {
	proTxHashStrings := make([]string, 4)
	proTxHashStrings[0] = "FDC09407DA9473CDC5E5AFCBB55712C95765343B2AF900B28BE4004E69CEDBB3"
	proTxHashStrings[1] = "02AE8AAAF330949260BA537B05E408CEFA162FFA7CBB04C6C95BE2F922650A9D"
	proTxHashStrings[2] = "036BCAEE159C09B75FD6404FAD6E76620AF595EF74734572E9D3DB4C226466FD"
	proTxHashStrings[3] = "04FFEFD49498E2FC51A6FEB7FC695ED614EEA24B1C42F62AECDCA36B0FDCC026"
	proTxHashes := make([][]byte, 4)
	for i, proTxHashString := range proTxHashStrings {
		decodedProTxHash, err := hex.DecodeString(proTxHashString)
		require.NoError(t, err)
		proTxHashes[i] = tmbytes.Reverse(decodedProTxHash)
	}
	privateKeyStrings := make([]string, 4)
	privateKeyStrings[0] = "BT0evsfM4r7Cc5lvbrVjBZuo1FYjMeIFg/6u7gb35M4="
	privateKeyStrings[1] = "A+Kn7ACPalXguwaBim+uLrPoYm9TnOTL8M9sdcu6xfs="
	privateKeyStrings[2] = "aFK6bDN2X3S/67ESBlrCg/kOHPyjRAtHLeor6aEk/mI="
	privateKeyStrings[3] = "Si++rgi0fAxhDAajuTXdPBoBWxzbvHPSvF8EeFm5b9A="
	privateKeys := make([]crypto.PrivKey, 4)
	for i, privateKeyString := range privateKeyStrings {
		decodedPrivateKeyBytes, err := base64.StdEncoding.DecodeString(privateKeyString)
		require.NoError(t, err)
		privateKeys[i] = bls12381.PrivKey(decodedPrivateKeyBytes)
	}
	publicKeyStrings := make([]string, 4)
	publicKeyStrings[0] = "l/cGlqBfWFP3LggkKGBjh3PAOYi5vNRrTjjaey9mxUuMHHegpGMDayxKhkaWq1vr"
	publicKeyStrings[1] = "AmOAMHT33gNypyJGEFm2EEj8c9xbAddlAsVgDWEKevVZ7OIZEUCICZPgD3ES4lTV"
	publicKeyStrings[2] = "F/hszrhryPzK1FyeLPNY1QH7zwS8R6nysbNZWYq0wTwSAm8Yw430zO9ydhRMSU5L"
	publicKeyStrings[3] = "Cm+p57XbZwromhMf9QmynKgD1Gtp4ZB8O6WKE2IUZIIj+2LmJE+Ib+m5ZCbVA/2c"
	publicKeys := make([]crypto.PubKey, 4)
	for i, publicKeyString := range publicKeyStrings {
		decodedPublicKeyBytes, err := base64.StdEncoding.DecodeString(publicKeyString)
		require.NoError(t, err)
		publicKeys[i] = bls12381.PubKey(decodedPublicKeyBytes)
		require.Equal(t, privateKeys[i].PubKey().Bytes(), publicKeys[i].Bytes())
	}
	thresholdPublicKey, err := bls12381.RecoverThresholdPublicKeyFromPublicKeys(publicKeys, proTxHashes)
	require.NoError(t, err)
	expectedThresholdPublicKeyString := "hXu9c6m/mA0TkJuc65caeHthsyIAXJnbNtsa7RwfZZtoqPlRtfNdLfY90E5QS+gz"
	encodedThresholdPublicKey := base64.StdEncoding.EncodeToString(thresholdPublicKey.Bytes())
	require.Equal(t, expectedThresholdPublicKeyString, encodedThresholdPublicKey)
}

func TestRecoverThresholdPublicKeyFromPublicKeys5(t *testing.T) {
	proTxHashStrings := make([]string, 5)
	proTxHashStrings[0] = "FDC09407DA9473CDC5E5AFCBB55712C95765343B2AF900B28BE4004E69CEDBB3"
	proTxHashStrings[1] = "02AE8AAAF330949260BA537B05E408CEFA162FFA7CBB04C6C95BE2F922650A9D"
	proTxHashStrings[2] = "036BCAEE159C09B75FD6404FAD6E76620AF595EF74734572E9D3DB4C226466FD"
	proTxHashStrings[3] = "04FFEFD49498E2FC51A6FEB7FC695ED614EEA24B1C42F62AECDCA36B0FDCC026"
	proTxHashStrings[4] = "0552e56ba3564c124ac8a6a0fa481219d100478566e81c7943507296b14484ae"
	proTxHashes := make([][]byte, 5)
	for i, proTxHashString := range proTxHashStrings {
		decodedProTxHash, err := hex.DecodeString(proTxHashString)
		require.NoError(t, err)
		proTxHashes[i] = tmbytes.Reverse(decodedProTxHash)
	}
	privateKeyStrings := make([]string, 5)
	privateKeyStrings[0] = "BT0evsfM4r7Cc5lvbrVjBZuo1FYjMeIFg/6u7gb35M4="
	privateKeyStrings[1] = "A+Kn7ACPalXguwaBim+uLrPoYm9TnOTL8M9sdcu6xfs="
	privateKeyStrings[2] = "aFK6bDN2X3S/67ESBlrCg/kOHPyjRAtHLeor6aEk/mI="
	privateKeyStrings[3] = "Si++rgi0fAxhDAajuTXdPBoBWxzbvHPSvF8EeFm5b9A="
	privateKeyStrings[4] = "TI+nrLn/rJbOT/Q44QGNTX5ElmnTMT2Mb6E5mujOLYY="
	privateKeys := make([]crypto.PrivKey, 5)
	for i, privateKeyString := range privateKeyStrings {
		decodedPrivateKeyBytes, err := base64.StdEncoding.DecodeString(privateKeyString)
		require.NoError(t, err)
		privateKeys[i] = bls12381.PrivKey(decodedPrivateKeyBytes)
	}
	publicKeyStrings := make([]string, 5)
	publicKeyStrings[0] = "l/cGlqBfWFP3LggkKGBjh3PAOYi5vNRrTjjaey9mxUuMHHegpGMDayxKhkaWq1vr"
	publicKeyStrings[1] = "AmOAMHT33gNypyJGEFm2EEj8c9xbAddlAsVgDWEKevVZ7OIZEUCICZPgD3ES4lTV"
	publicKeyStrings[2] = "F/hszrhryPzK1FyeLPNY1QH7zwS8R6nysbNZWYq0wTwSAm8Yw430zO9ydhRMSU5L"
	publicKeyStrings[3] = "Cm+p57XbZwromhMf9QmynKgD1Gtp4ZB8O6WKE2IUZIIj+2LmJE+Ib+m5ZCbVA/2c"
	publicKeyStrings[4] = "DBPbXPvwnlId5bBdsTYvjTGnpGe7HHAaOkEXn4yrHHgbzz/pfxNgCoASf9l1v5tg"
	publicKeys := make([]crypto.PubKey, 5)
	for i, publicKeyString := range publicKeyStrings {
		decodedPublicKeyBytes, err := base64.StdEncoding.DecodeString(publicKeyString)
		require.NoError(t, err)
		publicKeys[i] = bls12381.PubKey(decodedPublicKeyBytes)
		require.Equal(t, privateKeys[i].PubKey().Bytes(), publicKeys[i].Bytes())
	}
	thresholdPublicKey, err := bls12381.RecoverThresholdPublicKeyFromPublicKeys(publicKeys, proTxHashes)
	require.NoError(t, err)
	expectedThresholdPublicKeyString := "FvssjZ2t8CeKdNz2mYa/zuJYEVbCGW9GGKucaXlTUJscgBeScgGf3StNkVauL9pQ"
	encodedThresholdPublicKey := base64.StdEncoding.EncodeToString(thresholdPublicKey.Bytes())
	require.Equal(t, expectedThresholdPublicKeyString, encodedThresholdPublicKey)
}

func TestRecoverThresholdPublicKeyFromPublicKeys6(t *testing.T) {
	proTxHashStrings := make([]string, 3)
	proTxHashStrings[0] = "0740ce79c4e016fe5bc9b5438d1cab95bb3222352322cfb5fcd8048b9c6568cb"
	proTxHashStrings[1] = "007456fb4969a55aef48c6638ccb423dbd4dc5a871f373607f1f34d148dee0b0"
	proTxHashStrings[2] = "f726a232e89395adf70cce664326eb9e7bfcc1de77e0e7ea3b65e6765cdd685c"
	proTxHashes := make([][]byte, 3)
	for i, proTxHashString := range proTxHashStrings {
		decodedProTxHash, err := hex.DecodeString(proTxHashString)
		require.NoError(t, err)
		proTxHashes[i] = decodedProTxHash
	}
	publicKeyStrings := make([]string, 3)
	publicKeyStrings[0] =
		"0576000a5c7787d9ff04c38ab28ed80915f629186dca1fc4bbdde323bcd272d1bc6790adb198968ce575821d8e17f3cb"
	publicKeyStrings[1] =
		"0de93b6fc9cd50d0f8410ab967581adfb39f857ebe5c1155e84cdca9f048d55580373bb4afe8416129754f364b72b307"
	publicKeyStrings[2] =
		"94f04de48efbf01a4f356403043524bb4cde869daf6511bb9e7e0ce91d032cacaf00f624d18b15f67e01a5c23f530766"
	publicKeys := make([]crypto.PubKey, 3)
	for i, publicKeyString := range publicKeyStrings {
		decodedPublicKeyBytes, err := hex.DecodeString(publicKeyString)
		require.NoError(t, err)
		publicKeys[i] = bls12381.PubKey(decodedPublicKeyBytes)
	}
	thresholdPublicKey, err := bls12381.RecoverThresholdPublicKeyFromPublicKeys(publicKeys, proTxHashes)
	require.NoError(t, err)
	expectedThresholdPublicKeyString :=
		"13330b5a849c8ac388c1b4643a5faca0125c6d43f0433478cea4c331096839aea479f73eebf829b73ea4abfa3a067ece"
	encodedThresholdPublicKey := hex.EncodeToString(thresholdPublicKey.Bytes())
	require.Equal(t, expectedThresholdPublicKeyString, encodedThresholdPublicKey)
}

func TestPublicKeyGeneration(t *testing.T) {
	decodedPrivateKeyBytes, err := base64.StdEncoding.DecodeString("BAo7smfbXWCycH2gctnV2aKTFWcNk/lCXrLahGZeay4=")
	require.NoError(t, err)
	privateKey := bls12381.PrivKey(decodedPrivateKeyBytes)
	expectedPublicKeyString := "BBdEXubJCrsGbU3vFyYpfQs1F9iuj6YBB6mc6ntizjX7bh8mnEWk3NkBEs/cVVfN"
	encodedPublicKeyString := base64.StdEncoding.EncodeToString(privateKey.PubKey().Bytes())
	require.Equal(t, expectedPublicKeyString, encodedPublicKeyString)
}

// func Test100MemberThresholdManyTimes(t *testing.T) {
//	n := 10000
//	for i:=0; i<n; i++ {
//		Test100MemberAtThreshold(t)
//		fmt.Printf("verified 100member test #%d\n", i)
//	}
// }

func TestRecoverThresholdSignatureFromSharesCaseStudy(t *testing.T) {
	proTxHashesBytes := make([][]byte, 86)
	signatureBytes := make([][]byte, 86)
	publicKeyBytes := make([][]byte, 86)
	proTxHashesStrings := [86]string{
		"3029432A632181B6C15772A07CB640C86E07EE16E7F42F18DD1E5B611680357E",
		"7380D940CB3C42B5EE571DAF4B403A73F284F1788AAFDC65B7DAA6FB4257EC08",
		"11FA2046C7AC93AB995FC6676C22CE4267B4519615BCAA2BCE8632FF26F70C3B",
		"A01ACE41488DE639DDE6CB76594102ED1F3D3D8BEA9D29F854AECDB27065D3A9",
		"C51733D19E34AD980B9B05504AE87C790F3F48897D5421A570EBA497069AB2FD",
		"116F31006B1EA1316AC0ACF7482046017DA10A9A51ABC5AF2F43B0FD1F83F2A3",
		"3918B3A73616AC651493ED5C4C48A844B4B81937AAC00EDB9A8840F5976EBE52",
		"EDA8E421C9FA856CC1B4A70971846A9648B8877BF2EFB9BB80AA93EF61D1B9FD",
		"A6F41E6493AB50E93BE4C19FCAD14CB39985B42AC97205FE1AB68BF43B21B987",
		"FDBCD56D6C9A71944640EC195847E879F7F30B998AB3A7DE6EEF8B939F3A4510",
		"56652497D561EBECB45DD48482E3857C73B7A984E1EDC6453ADF0F11DDB7ED21",
		"5A63450C157320AAD29F440D14CBC4FC5770B93CF85B795FA82B991302AEE156",
		"9F4E2D54CC8CEBA72D02A8AEEE83E4251A7AD5BB4FC6FB336B4DF910C181B049",
		"5925C8A522585BE589B7289B1FEDA67A0A10E2D576E9399D5CB7E63A94B5192C",
		"4B32343C6F64E0E04E6A45C367DF1C7BC66A32A46CCDB24EBB36F8B98DB71A3D",
		"8A41E1BAD9A1796CAFFE3CF351C8A95ABAA247F8DC58BF076C38841594069647",
		"318BDC18E44D050ACABE27C9A4D690CE08CE0A7E9D68B69749926EADD04DEB88",
		"B5AFEF285DA452E7E4BE30282CBB7DB5A0E8B5BBAC4693E1FC12D1BAC04CB772",
		"109E45AEDFA3B9EEDA9BF3A12D392B3DB711EB9C248DB5FC5C878703496621E9",
		"7A2A207F7076C371F1E9AD7B5940E8F696DAB0C5955AB389526D0B5DC9D12159",
		"77A60992B1141165596F3A5A67884F26CAF9C21351C5866ECDC9625038C444A4",
		"F64FFB065AA4771B76DC55C716E067A2EC27171D81A411434BF90AF9D052B6DF",
		"CC444463870853BE3619FFE546442A4FFD2340EB59C35F1C41308D6A988946F5",
		"4C13070B2C286DDF96038478E491EFC9DEFC4EFEC77C5FC8B181F2B55D8A7096",
		"BCC7FCA859383070960131C9D1B316026FD1568BDEE8B34C357A5C564A3761A6",
		"4661BE45C0671AE1ECBE1A4D81F441E46118D94E01BFE5E483472DCBE5186C19",
		"B5BF194DF53163356C20601A12FC2284797D19D4338CC81E866149A2AB2A06F0",
		"93D402C3A60CE05A40D9A1E68635CCB7255D5FC7985B4F377CA11FC45A49A407",
		"748473592FB75932500046C45477222FC6AF296B5BC50A81936283ED6BE94BE2",
		"FAAC8B8D958B3A7990A0C0B78F3C082DA2BF6D3C0035BC13AA0484EE2E7E2EB0",
		"DE0E65899F4121092FD05C22CC3C7241243338EDFA5D259C4E61D2278C58423F",
		"65D41DAC8FB520FB0C068B57E86855223D7646C19B4C744618E3549FA83F601F",
		"86F3E79F54BF6798BC8F3014453F2C5358FDBDD64A7E78CF2A275DA23D852406",
		"01748DFB56EDDB3195FA358B7FC9EEC148EB75BEA0D6D2A23EFF2C959E5408BA",
		"03FF74727A3D9768D476C4039B95E54F8C110717DA9CCB53DE9843766DF4E7D3",
		"7F19CB81F8C6F02A282379E4689D2C06E0CE7B75E41837D04BC79F507A3F370A",
		"D07D66D82D840F153411A2991EC094AC278E419FCB9269186B4D1D70886058D4",
		"3C138AAAD47FB62B6CB63A39CE114102DDA98716F89185284B22A72E6DAFE284",
		"F572E9ECAF61753950E64FBD6581710F8B0D5377D0F0B18D5968D77A21EC605F",
		"CE8F2F6A377154C0D7B94F76414DEFBCC4EEEE6103B4B69077D16FE575B5844D",
		"CFFEE71A4A92DD5B9771BFF75450CBF6110E57EA4C3997AC855A335FBC33B359",
		"37B955E83162E8193E09FBB6DDC0DA9FDED29D23D43EAAD376E5E9B2C98467CE",
		"B0585BAB89FB4D146B7982E8F61EF15E5FEDD0AA6B241F1F036C9C1EFA10E693",
		"A57E101C6ACF9BDD705188CBDA5D057699053DD97B6FF4DF1142C589EF19BE3D",
		"BB12224423D2F515D5F2D65D8E2AC93C53556150FEF677856CF2A481923057FF",
		"86BAC4B628AC5B7E3DF1C8C54FC4812A96123F45E7673F773181CB5061436263",
		"30FB840B954E457919DF742D5842C6CCF111D8A00BCF1B1318470A0D0E6FF79B",
		"3412C111CDBA4480542BFA4F5C19FEFF42567620D073DD275E40AD53080CCF7C",
		"84C422F501C997FD92A28467A402B50D7B885485A80BAF81CEC22B88903F88A0",
		"C57CEFE95F4B06FC5AADAE0E4466067961227729FB9BF030AC23573747348858",
		"49A4203897570C7684A664C1E205DE2D11757B09F294492AB3A1570C6B562884",
		"A77BEA5FC74FC6B3BAA6E83884965090BA801A5F0B0998A6441469C9EA135D89",
		"0E6FD4894AE4778D3F3A8CD13DC28E5649BD71B1034EA9C5C5BA07646BFCC90B",
		"D52BADD4D81E2BC28FDDB5585F05D72BE67F998756527B55DCAA4DA20B5E62C7",
		"74F8DFB0E2FD4D2B478F44A15FAF6F00AB40875C350A3366D880E95412A072E2",
		"C975CF5908B5E673B969F6457D400AB678B34582FAB131A239443852EE860E5C",
		"247AE64AEB7BA4D7C85AF86296A588504842FB10F9F8704300B9C87CEF9F3A19",
		"89DF5FCBB700010CBE2AF64B9CA1749BB772E745F81EA5CA1C4F0584590D7F21",
		"646DCC2A8BEF5B1851E81F124ADF9E2AEB4479928A177F6BCFF2F88610C4FA1E",
		"69740FEA9BD9973CECA3A140220C0960D7FFE8DFE040DBEE65D2E70E76C17007",
		"722C8C8037B7D1B450E9C0F03DB1CCC7BBF827545D03D2A1D5B8109A4D9E7D8D",
		"51172935CFC699E312EC12338E14D12FD54A5FB4065922055980D8206DED70EC",
		"886622DA5D1F1B025F69E4CD924FC1928EA35D8312B807D8B50D63107FBD9A16",
		"DA21CA075F0B1B6C29DF0391165030D85A8D5E7474C6358D9EDBD3DD270DE78E",
		"C3F559E803F09BB261A5F94A5C020816A4CA04627D1969819C32026D46004816",
		"9F1E242390CDE84D67D9E2CAEB1FC042A6BF0C85C8393026733EF5543FB0BD2E",
		"777DFFEE76D4AC2B3C9222E6D3CE285527A16281B1D22D511FDFEDDE4E46EE70",
		"2344C8196AB9A4BECDFB3A287A511278581D784B9AFDA234BE289C85463219AD",
		"3F669ABEEFBE8527A5CA342037F8F97F5E6C8A65F559936ABE546601EFDAB603",
		"5BE5A28138A658A802A1E871D7BB4A5E8A167EFFE9E665B4A2ECAA559D01734E",
		"528B059C0430BE26BABD893FCE8850EF5F10BA1B166331AA66DE0F58F1BD5CB9",
		"EAD18F6DABAC93C3FA0DF238E992FABBECFD75B28DFBBCBCD0AC4BD4DC89A255",
		"30FB0B68444A03B7A3A7F079F1445CAB153962FDEBAF77D9752CD1C08C816C48",
		"731DDB4DACE693A27AC91C696685BF3E01440E2F5D57B53E2ED57059F6A33E0D",
		"FD21CF50C8F2F7E475B7092A5F136129B12D30E9EC98B03614EA0788FAE2F888",
		"43E49C1F2735906DC298E133E1D22E8FE4A2A4B23E05E871DEB6E99DD6A924CD",
		"2F4BF68BCD9F4FE5171F8111A7F007F76D1298C1124B8A85174E64E057A2522D",
		"01F023A48BA1D046F980800D8C39B239E21D04855876700421F36E716A91F9FA",
		"59D45830E45260A043FDD196F966679F1A63F1B6C28F04563738226BD6548658",
		"4A7D3E011DCBE58192A8BEE91D366C6F3720D8247A7DD586B8A50A0159EEC937",
		"E780A06795B6C316AA84451ACF07E0F11F9565E256A59057717FBCF0008AC254",
		"207D97711F4C60A23F5BA1A79BF4B86ADCEB51BDFC25CE25172C8A311147BCE8",
		"11DE79269062F95FCF9F5185E33736819AF5D1F83FF06589016E7992F9A76E04",
		"D23A37AD5FC04FF18955DA1EA1CEC8975FA03C525104F9553B3CACD36045B6EA",
		"8B971EF085C168CAE87C3EF20DCDEBB23A9A26EB7D47A4F793AA2353BED4018E",
		"6DA069138E905FCF845D2E92979086E2BF89BA25D50E1C59799CBF4D2F2A9D01",
	}
	signatureStrings := [86]string{
		"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",
	}
	publicKeyStrings := [86]string{
		"890378141A7B51576DB7F174F6ABDBD06E184936EFE0A0FDE0A13DDAAE1EAEF5BF9C0D15372F0990E4EAFCE53F612494",
		"180290C1808EE3633DA3C3BC0872972CD9D0AA18542B660A304D6E40D9824D447082679FDFA27F69BFD573D49B59B58D",
		"0C0381FB9BEE43165746A6265C55D7F34859322C88253EA2A9FB4A1E7577D5C7015CBD50150570515B582D5056B47039",
		"1866672DCB17421750FABCE201CCBFEC2AA9F5442E5FE8C4B5DBB8C8C32EEEB0FB0F77020E9BDC0B3D33B8C6C11A87FB",
		"162FF7CC2CE8779E2760B2C1B3D4ED73F54A84AB8705BF7E9F829BF53234F4B1608BC8AB31CC049DCFBAC441F11A9C98",
		"0A968432E5859C0A26A4036E266160A9557207FE5178F83AEEBB727C472D3D8216EEC82C28C78E8777356BDFFF3FA9D7",
		"84E87A2ADA0EB8CBE000FC12D2674F7CDB205D89B607AE6AFD26D2B28EC4CCAC03EF993AA16BCBBC0942856A226CFF80",
		"89711D5476CD0103866BB46AD36190D1C15FE532FBCB0F2BF1868B16A4C63DEACA56D64A22B9F2F97AE85BD5B69052CC",
		"18E586C28D62729AE4B29FDF90E7072CB7D8E9A56729513318AB3F9E37974686F6930C0EFEFE24B26813D2925537E31E",
		"91550C9FF7FE2D95166ADACADFA77D652B3242B6AA45299B6AAE33D6443C75FCD232B2FD13B167D2CCAC22E11DC60959",
		"19B81F238B9431918635EC94671427254EC035D0C93D760A846DE83573256AE78E7B446AB72349DB259D280BBE977CE2",
		"92A7D06B724DB6314AD2A6431F9246185C3FC673011677B12A9E75DAD987830C0D28B7E2141E4615BF181C7BD70D21D5",
		"16608EB9F39EF98340EA3050AD4516DBD291CE86ED917E5EC150C2A11623DE34F536A5006484808B745FE5E7C4272D00",
		"1909844D0A1A4921908812340A701B2570F157E56EB1C09223E6BBBFE1639B9DD703D1494EA356F098213D48FCEBA028",
		"09484D569A0C22C87D352268B716FC01E2FA558CB9478B1E1CF3EFB13960AD2532FCB76F78C7359A4949D84399B05B4F",
		"8CDD2E59B30161B441804ED0DEA99225C77800691F83824F4183E72F21216F9598D2808B21DABE8F9282AED8A8185F66",
		"05D75FFC72CAF6E62B9E2B3F0E054B4352BBD5DD78F3465622D409031909D329A08652C546921C5BEE833286B97AD673",
		"8F2CD29EF4F1B8391DFCABC3344881DCBBA1D9EDA2B3171A7FB03C8E837595C0B10B69AE8F7D8F2D62DC673972557556",
		"9048D22C3AF1004502F179A8616F248CBC9DAA916F51F69F7481F7375C98D866520F70982C9302DB9ADCEA5C794E1A68",
		"99B559BBA6005D63778B418F62DA83776B7BA93C99592257AD0FB82D3B3B7500D99813D68EADAADE1A8FFBA0953C8BAA",
		"947846CA0A1069D81337B5F5B8CA50026AF81676B21EE71A746E86F07746B7A6F2701C8CBEA1D9C7FBC9A8B91EBC28B2",
		"9108EA93BF2F53511AD9B75D07E3B4B71FA44B3B3230D4778C22EEEAAA6C07EE52E57574D472544551C40FDEFADB5D71",
		"0C0BCAC412BD520BFA82D794CF39D66A0DC10201430ED026A6228F8388F32AA91CC9D0CDE30B6AC7ED1A3D23A3DC4150",
		"0B1CF7689AA059143C43169701D055FB67646BB589C55FF3677EE67E3F70B9B98B2CF494151848585EA0F2B2C963018C",
		"836147F210BE8FE4D6924FDF511FE75C7C961C898F648C9C639CB0BE0E1290E64FF202768564629FBDB87CA8DCA743CB",
		"03603F5E2ADCBA0C83FA044A8144A8A0B68DA0C99029D49B6AA595F6AA46B4366040259D0A5AF1EA3E6513F195DC450D",
		"07D6B436AB1604AF5A48EE332101E2EBE65F5AF1FFE9F40C8A48D4017DC9946543E7D88609D17182F98EF2C7778A65B6",
		"10CD785CC93E4ABC4462A6207F9D61D6CB2EB6D34D3C9FA3911E5EAF89E1C1380AF0EA1FC8F17554F3C7ACE860F6884C",
		"0CAAFB59988ECDF3BAEC339324647CE48178A21907D8B49E0DE6BA7B9761077E1CEC22F544E6ABDC9EB157FF7E0A5E4B",
		"9755062B4770FA2AB5C6BD2F4780D9A2053477790F0CE0ECEFB6A55C59EEE29B51B2661874C20B2CE7F7DD98E5ED78AE",
		"8495BAF869830314CB5C15DBE6883042EE12A8EB765C7CFAC4A8BC364214CAB1D1F7682814FAF9E333353E9EEA1530D0",
		"91AB982E7D7946A9CC73C41EEF8E3545244038E9EFA7C056A5FA20F69C9137476602E27455D2278255ABB26996D4752D",
		"8F7A0D758F3DB9051701CA26B04A0EBADAF8B8ECC18D853FCCDFB4B943BC2C0253B83F4DC6E886662F472172F94509E8",
		"8550F013BE70CDB8045DF4A7D70127191BCFFA2D602880DB9698C9B8FCCDA61338F5C6FC4662BB54C5634721F01FACD6",
		"0C06483CEDDA6CD2DCE2CEE2B2E942D69CD5B69DC783C6F6C806BEF7956F8881A80F38919F1F62B338F1AB78023421BA",
		"05B660F0C824E45A9523F6C751F592CBD226B61164F8B8DE1B71791CA0A7E4D61B96D08004834424C3F35DE5D9561DE9",
		"99F0B2A54231FAF561F7FA71E512BC216B794938D3BC3DD249B14719DACC2FDC9E54FB56708F5CB0C96CD5658EDF9997",
		"0A6B020A2CB9F311940D29E08DDCDDDE1B4DB4E277A5B971BC917B1A0E3E5A86076DE6A3B5B9B90B0DD392D9854D066E",
		"0928C530AF6AD973C21042C1E821202D3235B1590F0A9361A3E54C8FAE98A00051BC2D648243C63675D6B6C3A4321490",
		"8C7948EA0253C343529DA06EE6408D0F695A346C6595783D1B5DA7FF90FEDBA83A4A31EAED2C5C7E934D71052728C586",
		"918AF3EAE981AB77B9CF3FA641E81D9E98623DA9EF67B52B662892B538831E43D58D2BB25BF2D4E72D7E47870B004A35",
		"0DB22AC28AB5696AB5C61BDA8FF6032BED65755D837CDC55FF301B8761FEFC42F33DAF3580617C03D74F3354D7F56519",
		"0C6EEF88A11398574BC304FF7B8EB553CE5089CF941D667F827C2D49F455F598C84943A2509EA417A23DB69308FE2679",
		"97DCA36F667A9342CA931D07D03261BCA700F2833A298E0EB96D24A525EEDC4A8D676DF87DE61EAEB880BF771057442E",
		"0FAC24EC8E04D593BC5E1E73A57736DC6538EA0EFB053662B3259FB93DC9B1616CEADE657B34AF6BC37F74A900FB6F03",
		"92D007E22EF6A35317CEA06CEFE76959DA90CE01A190BF5731B9FC949297A1FEF8FF8FCFD0DB04DBAAE9BD9C72865412",
		"837CC6B09607A340BC63A7E580C0B1FDBF56EE47654D70678D19781B5648C393B50196BC1258A8E150BE15241BC46851",
		"92F299BA140994CA10A9E7B51CFF34A7D63A3E136A4BB26B9240181DE9B68645233E765010CFBAEEB5F45BF006D6F4E0",
		"85CCDF73A8100EEBC2D83CB80DB23313230287E1FAA24076029CDF2F7D088A9127DA4B4921E848EF2F1FB800413D8ACE",
		"82681592DD0B5CA8FDB5D31D85B62AA7F43417F56D6F6DFB1D62742E8481BA62773D5FA2CEB31E7FAE95777807FC5DCA",
		"968FC0BE8192B0A2B4F241B9B34F5F9586A72BC6D7C64EF8BD6F1086209076B2AA298FC707115E64BEEC21DADD02D490",
		"902BC33C8A074EDD6519E0D90BDD7754FCFBD4DE2D21D057E9E1D76FCBF4C0B8576A28CDBA7B6E536C43973C2B1AE802",
		"1766725A78F0C3264547AE6A128BF9E77B1760B2E5EDC563F643AE262C37A3ED98916590C44302D8FDC40DA4D856779D",
		"1229032F3CE5FB8216AC681DF8274C13AC711E0C5109B8F792FA2558414AE9F7D2EBAE7695E405D0A39235530951972D",
		"06D68BC5CE3D95C62627998F8F4F18728A0B5123772EF761551273CDEFB5A4E3D05134B9D2DED1EA3E2EF4CDCD5B964E",
		"99262BC33747BF84F0D79E98D3A3F5022E2F1C7FBF9A133C70F8F2C6B27D859D52F10C980B91658EB4ADB566DEDD6CDF",
		"824295E743E418FE38788276552C317BE18D9EDCE90D40CDFBD21168821843D1FA0D12CF9E778CE9C6911D955AE9BF98",
		"92E3371151A903CD54CA61D40006C0E3886EEBAA5EA018C93B9B76EEA93FCDAC3BA4B3480C114DD8367995BE8BC49A84",
		"99B944B55C96BC44B5F6AC2C8251DA7791C22CAACDD0CD157523F8F92A542E51DBFC0E050D638FD2BAF7A436C6AA7E76",
		"98C2FF639702E5E082359F88BA110A5DE80F6FC257865AADCBC8124FD566590931AC94D6D362FFA03C2C914754BBE1D1",
		"14ADE1D234ACFBA60DDA20D34A475AC03D6BF5E8CB7AA619F20464B044F3EA2D6E1F1497A96311C70C8DC8F13B84BAC2",
		"90696CA6E15146CA116149429BA7EE96F0B4DBBE8EF1263F9089CB2B61337162DE99F557E6C994193CF39DBA7F649D4B",
		"0EE1FDB2D36F5697E2AA4F59C198C6A2757F3AE7CFBAA966478EEFD18D97C48E891CCE46E030507534DCFBF870C06B2D",
		"8B6EFE43AAFC79D963DEBA4298ED9F5EFFCD1E5A73563D87A5E90DF49C94257778D3C23545C476563FE5567D00493001",
		"96D005F04DDD9B315B6981BAB262C7A7BE022E30FEF92B718E7F6E1E3B4E81C0E57CCEED3E0B85318B4FF97B2D1B7215",
		"19B7A76E59C09BAEE7A6E9C552003700DFC32850B094834F66CDE2363ED64703248DF076A221DD6CCCBFFEDE79F416DA",
		"0B6C49BD1090B3675491A9FD2F3560C651DE74BAAEA90CFC0163D95C8B0A194714F6B08BA36C7A8E1E76075BC74A53F2",
		"921D037FAE61C80273788B4A5B39A5ABF4118C89F747025C794ADB5278492DEB7F8881BAC4D231FA11E6192A00FE7A30",
		"042A49C36E11FCDA397E13B41F0C00934012CCF87FAC6B6B486599878E4D6AE37AC36FC0BABE28FBF0840ECB7CFFF418",
		"0B9EF6279E4907698A12D71C750932D62346705680E1A5A8DEC94302942CD78E1FA7743F531CDDA467FDE85AB0193C0A",
		"852CF573B6EF2FC4B87D63D44F837AC7EC6F689F150C54979049BF8D9FE06D61C6721A410BBA589277D86D2B51A7CC72",
		"19261847BCEAFBF9119E1062AEB0D180749E41E2085AB11844C49E017701526456265D7BF43B0F1FC6EF7F756D49AC09",
		"82E71755AF3AF1F20E56D8F45E25D6570E8E3342DAD24DC72905CD23C8628A12956689805DB182456BA0B6BE9C809570",
		"81A7892A273188DE661015E41EA0A233F13E66E291DA41E7FA440552046918196E4BAA04CD7A1A3F76584C342F887EA0",
		"03AAB97370B79846DC5904CA57ACC428BE9B60DDC66EFFC86245D08E6E1F044CD59335D227D03FF683C8B684402D1A1B",
		"0FB49E0508CA813200C20603E8B677381FF2652DAED85285899C8C07BA52DCE1519DF262206B9E93489092E8C1BD9C8F",
		"15A16013A1013132993DE7197971242DC57F2E4B759DDEF6290733AB5A665A03428F320B90D83DF597E708280B83607F",
		"8BD0EE97B462E2694BFFAE1584C5B005BCAB61362F0F793BDDE207ED5D52E93EFB6477E1F8E4D937F235E09EDD04E822",
		"0E834ECF1B6D1FDABE321D4578561BA01BD68A893351A0DABAAEA2D641A4D18C5F16002A61C89351CE175C03A632EFFA",
		"95E2B20C6AED1B44A997AA97356ECA3CD6732D26769F8B380AF3AB3DFD1183794A277A09E04331E6DCC0C6A51820D5E4",
		"810803F26945C7DC89177BCBF4B4B7C38D15183A71848BF34D929D020A6A546502DE15C65B7898EC2F17E1922D5488F7",
		"826C0BD0983F5358CE40C0EE3560B022A948937902EC40213A9F05B39CC89B58E101482A6725C14D9AD231C98DEAD38D",
		"8C41EFD9D7B43114FF3C03F0169145434C7E87425369FD30BE39BC76482BA1025D2D8C3449027AFABFBA6D026BF4947E",
		"18ADC100DB95D6B6DAAED0D3D3131F0879C7252676C8D8D2F0DA3964ADF3F1BAAF2EDBFD5993D61BBB38AC26A989603B",
		"816982F0A96A2A1DFC8DA49620F6B1252F4C9F0DD14798A6A85ED69A4B1F47959867C67C157D0EBACE2AEEC54E04B717",
		"0E2AA65E06CFBF52279A9D22386107972F22E46A2EC668872FA1E7C285A4F2CE95063A8545E9552F92206D6C07E00AA4",
	}
	var err error
	for i, proTxHashString := range proTxHashesStrings {
		proTxHashesBytes[i], err = hex.DecodeString(proTxHashString)
		require.NoError(t, err, "should be able to decode proTxHash")
	}
	for i, signatureString := range signatureStrings {
		signatureBytes[i], err = base64.StdEncoding.DecodeString(signatureString)
		require.NoError(t, err, "should be able to decode signature")
	}
	for i, publicKeyString := range publicKeyStrings {
		publicKeyBytes[i], err = hex.DecodeString(publicKeyString)
		require.NoError(t, err, "should be able to decode publicKey")
	}
	thresholdSignature, err := bls12381.RecoverThresholdSignatureFromShares(signatureBytes, proTxHashesBytes)
	require.NoError(t, err, "should be able to recover threshold signature")

	// expectedThresholdSignature, err := base64.StdEncoding.DecodeString("lAFnjEd9eXEI3NWVc65fUOICPEYatEOER5P7NYrDT2EdD5CnqB+bjizBu8TOEA8FAlz7DWx/kQrW8yagJOmfznkUbRfx6puL3GXcIey8NJjZJkoWmmS2QdneRX0ec5D4")
	// require.EqualValues(t, expectedThresholdSignature, thresholdSignature, "should have the correct threshold signature")

	thresholdPublicKeyBytes, err := hex.DecodeString("04195b1adb84f85f43a1009fa4987c732ab5f751b42f195442ebfa3d031831dfa67050517f12bc79bf0a33bb78cf873c")
	require.NoError(t, err, "should be able to decode thresholdPublicKeyBytes")
	thresholdPublicKey := bls12381.PubKey(thresholdPublicKeyBytes)
	msg, err := hex.DecodeString("C4E3500CAEC0AEB79CFA05F10EBE77717BEEF5D51159E2A89D8FE98B696BE4A9")
	require.NoError(t, err, "should be able to decode msg")
	result := thresholdPublicKey.VerifySignatureDigest(msg, thresholdSignature)
	require.True(t, result, "signature should be verified")
}

func TestRecoverThresholdSignatureFromSharesCaseStudy2(t *testing.T) {
	proTxHashesBytes := make([][]byte, 84)
	signatureBytes := make([][]byte, 84)
	publicKeyBytes := make([][]byte, 84)
	proTxHashesStrings := [84]string{
		"002ADA30B0B2CE0A17069454BBB74D0323984862EC0206FEA51658B7DD6666E2",
		"01748DFB56EDDB3195FA358B7FC9EEC148EB75BEA0D6D2A23EFF2C959E5408BA",
		"01F023A48BA1D046F980800D8C39B239E21D04855876700421F36E716A91F9FA",
		"03FF74727A3D9768D476C4039B95E54F8C110717DA9CCB53DE9843766DF4E7D3",
		"049441CBBC42115CC3DA375EF2974DFF3956712D4C8623214CF9919F61F361E3",
		"0C9460D4A6860072023078328F12E91030F3712AC686F698DE604057D196D181",
		"109E45AEDFA3B9EEDA9BF3A12D392B3DB711EB9C248DB5FC5C878703496621E9",
		"1123E20847F3690FDD917393CE5FE60A64E3F5900CB167CA31A605683D06E70D",
		"11FA2046C7AC93AB995FC6676C22CE4267B4519615BCAA2BCE8632FF26F70C3B",
		"150952B20FB53695C920BB95FF6D77CBBE3074C041F6C28EC076B70186E9BB27",
		"283B3C54AA5C9E5A4DC1993C5C9AF6EACD82FE0940976A18386E505BA1AF7CF4",
		"3029432A632181B6C15772A07CB640C86E07EE16E7F42F18DD1E5B611680357E",
		"30FB0B68444A03B7A3A7F079F1445CAB153962FDEBAF77D9752CD1C08C816C48",
		"31352D75AEEA64EC2E5A3775C3BE87F0756DF983C80A21B899EE93199C67306D",
		"318BDC18E44D050ACABE27C9A4D690CE08CE0A7E9D68B69749926EADD04DEB88",
		"3918B3A73616AC651493ED5C4C48A844B4B81937AAC00EDB9A8840F5976EBE52",
		"3C138AAAD47FB62B6CB63A39CE114102DDA98716F89185284B22A72E6DAFE284",
		"3F669ABEEFBE8527A5CA342037F8F97F5E6C8A65F559936ABE546601EFDAB603",
		"43E49C1F2735906DC298E133E1D22E8FE4A2A4B23E05E871DEB6E99DD6A924CD",
		"4A7D3E011DCBE58192A8BEE91D366C6F3720D8247A7DD586B8A50A0159EEC937",
		"4B32343C6F64E0E04E6A45C367DF1C7BC66A32A46CCDB24EBB36F8B98DB71A3D",
		"4EB2E565F1DF2BC390C813149C86771F69809A83549440E70343289B605E6208",
		"4F79A2FD4172870B9E389C9CF0A5EC22104E93FE2479E18231F96CE66A00D5F6",
		"5855F045DC4DB4213F0BD153ADF6CE3A02E59A06A3887CF01FF552F81E580CC1",
		"5925C8A522585BE589B7289B1FEDA67A0A10E2D576E9399D5CB7E63A94B5192C",
		"5A4675C82B154C5DDA4A0FA18412461A67B843A122B4383E5A77F2BCEF8239D2",
		"5BE5A28138A658A802A1E871D7BB4A5E8A167EFFE9E665B4A2ECAA559D01734E",
		"5F9DE79485D3B013D81CBF76DB41E2B6D2262CB14F93688FFE7B10E9D15BBA5B",
		"646DCC2A8BEF5B1851E81F124ADF9E2AEB4479928A177F6BCFF2F88610C4FA1E",
		"65D41DAC8FB520FB0C068B57E86855223D7646C19B4C744618E3549FA83F601F",
		"6DA069138E905FCF845D2E92979086E2BF89BA25D50E1C59799CBF4D2F2A9D01",
		"6EB0A9833F7000128F643EFDB8698304A6D426C95DE91E33B29764F0ECD67060",
		"7049FC4A9314DAC714F7E94C640DDF847D8AE4B83402B1CD92304D300346EBF2",
		"722C8C8037B7D1B450E9C0F03DB1CCC7BBF827545D03D2A1D5B8109A4D9E7D8D",
		"737CBA5A656579E1D2BECFEE2D92F6C7AE3B84A8ECEF02C6F53764A6499A8C79",
		"777DFFEE76D4AC2B3C9222E6D3CE285527A16281B1D22D511FDFEDDE4E46EE70",
		"82B9728D8B20E7946E9757407C8B21F96F52E3878142CF10FE275D1A0D8B7808",
		"84C422F501C997FD92A28467A402B50D7B885485A80BAF81CEC22B88903F88A0",
		"86F3E79F54BF6798BC8F3014453F2C5358FDBDD64A7E78CF2A275DA23D852406",
		"886622DA5D1F1B025F69E4CD924FC1928EA35D8312B807D8B50D63107FBD9A16",
		"89DF5FCBB700010CBE2AF64B9CA1749BB772E745F81EA5CA1C4F0584590D7F21",
		"8A41E1BAD9A1796CAFFE3CF351C8A95ABAA247F8DC58BF076C38841594069647",
		"8B971EF085C168CAE87C3EF20DCDEBB23A9A26EB7D47A4F793AA2353BED4018E",
		"8BE825326B2E6FF3680D5DFD0F02681DE51C084655A9D79409A924A2923FFD38",
		"8C3FB40FDBC8FDBBE4490EB4918F38AF0828BDEA2BA5008817D6D9A9BB9D7C09",
		"8EB351BBCD92B7405D748B7937E9D92FEC3398D4A6E76D9369DC11509899E26B",
		"9034500FD28FEFC2287FDB2DD701A0DEEC7857B9078EEA05A3B8550E10BE935C",
		"93D402C3A60CE05A40D9A1E68635CCB7255D5FC7985B4F377CA11FC45A49A407",
		"9693E443A6820038AD1160AE01311A85B4573965CA4480317611D5B6E048AA2D",
		"9E2A2C6A06EACE68417AAEE97339888191F3A3FF5A496641F0EC251A25F008EA",
		"9F1E242390CDE84D67D9E2CAEB1FC042A6BF0C85C8393026733EF5543FB0BD2E",
		"9F4E2D54CC8CEBA72D02A8AEEE83E4251A7AD5BB4FC6FB336B4DF910C181B049",
		"A3BCF5F249C4F2F39D8851D8FBAAE6BEB62CF29E219C164538CF6B9752FA996B",
		"A6F41E6493AB50E93BE4C19FCAD14CB39985B42AC97205FE1AB68BF43B21B987",
		"A713612FE02F9BF2657860DD6CC822C7DA06F8EABB2DDE39C98B4A9DFD82130D",
		"A77BEA5FC74FC6B3BAA6E83884965090BA801A5F0B0998A6441469C9EA135D89",
		"AACE03A9C75C17BFB8ED760974E5DD8C94F13234CF03A76123B667CAF2B71BBB",
		"AB60639A6F7BB2C6C67FA5A65060FA94D3EDC1868E8DD16457945F35CAEE57A9",
		"B0585BAB89FB4D146B7982E8F61EF15E5FEDD0AA6B241F1F036C9C1EFA10E693",
		"B5AFEF285DA452E7E4BE30282CBB7DB5A0E8B5BBAC4693E1FC12D1BAC04CB772",
		"B5BF194DF53163356C20601A12FC2284797D19D4338CC81E866149A2AB2A06F0",
		"B7B73B661482381A2EFCC1E24F3514C8E998AE89983E718E41E5325887D250F3",
		"BB12224423D2F515D5F2D65D8E2AC93C53556150FEF677856CF2A481923057FF",
		"BCC7FCA859383070960131C9D1B316026FD1568BDEE8B34C357A5C564A3761A6",
		"C1DF04CBBC1C77AE3157C4D6B50EAC093068C1ACCCCCD1F6206FC6BB892E8BC8",
		"C57CEFE95F4B06FC5AADAE0E4466067961227729FB9BF030AC23573747348858",
		"C587285F5883C595E9CF653CD898797667833D919B3E443A029DD7C497B820D1",
		"C89B2915C459E9E28BDB8583CE180B9D0EDA950380990CCFC07CFE5229774FFC",
		"CC305401F1DA84D0A96553C45B45D4AD2DB4D93BB3DC85E75112A280A2316EB7",
		"CC444463870853BE3619FFE546442A4FFD2340EB59C35F1C41308D6A988946F5",
		"CE8F2F6A377154C0D7B94F76414DEFBCC4EEEE6103B4B69077D16FE575B5844D",
		"D07D66D82D840F153411A2991EC094AC278E419FCB9269186B4D1D70886058D4",
		"D52BADD4D81E2BC28FDDB5585F05D72BE67F998756527B55DCAA4DA20B5E62C7",
		"D695FCCD1C5C8EAFA81DF22E8A66B3CC362C3ECB0836DB988E5F2808EBCC839C",
		"D95B8CEF0F77F313B9788EBF97B030D7192873CACD764B51583869564CF5E547",
		"DA858853688F8317D599B27D6F8F7B840F675F856CF9ABF007314D16D13799C6",
		"E49CCB727CDAB6BFE8B3BAE02B50636B84C91B7DDC7A82E112472883F36823FC",
		"EAD18F6DABAC93C3FA0DF238E992FABBECFD75B28DFBBCBCD0AC4BD4DC89A255",
		"EDA8E421C9FA856CC1B4A70971846A9648B8877BF2EFB9BB80AA93EF61D1B9FD",
		"EFB3F539AD844BF34F9529602480E504885915B42B10102B9BE38C4DB31EB1B1",
		"EFF303D3A1C8AFAF402B56A6662A211F073F56DC729D3CA44DEB00786AFBEC37",
		"F04C2144D6241F69E5F00A7394C8968151E90EF5988D528837F8D44E7629D2BB",
		"FAAC8B8D958B3A7990A0C0B78F3C082DA2BF6D3C0035BC13AA0484EE2E7E2EB0",
		"FD21CF50C8F2F7E475B7092A5F136129B12D30E9EC98B03614EA0788FAE2F888",
	}
	signatureStrings := [84]string{
		"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",
	}
	publicKeyStrings := [84]string{
		"0D767B61199E0624182FD040D0B38C3D98748429C2EEAAEDF44F309A8286A325C995C9716685804141199E6DE89F2C7C",
		"045DB9BC62266C4D13EC1B160CD43EE112C3A3E96517D2038C1C586EC64D042532CA2EB3248FCC27DC68D77B034D9198",
		"007AA6F821119175BE5597FE59A50A18B074C05118A048A0D0938CDEE9B1A3F8C38636B9CF1E4E8B02A5411EED0E904A",
		"195A50975070AF12BCD0C5F557FEDB0F6BA42251E01F1D6278B413FB9B498ADD1A579157FA6D75496D8A8DF951B97B9B",
		"16C9FE334E24B82F251BB00D82BADCFD31CDE4975BE180DA97795D26ABF1E6567C4A76CF310B27049BDB4CEAB8D82225",
		"16988B21A3CF958B588D3ACDF5F49D4EEA91D19587BDDF6EAE9CE945ABDF9DDDCAB49073BF0E496874BF7F61A3A73CA3",
		"01693BC69139E856363FAFB27787BEE7EE6E890EDED9493E07183DD5752E62C03CB840A26008E8B202576DF5C44F7730",
		"14D78F3CEFC64B9F38A51118CF6FC9B1C6658B813D4BBF0ADD94A42CFA2CB43E5E46B17A65C18F977CD46B77453D1DE3",
		"127EF103EF9B22DB6B14A37D8062D1CD35F2131BE4E4A806770F6AAF9C4DE4A4DFB1C184C52F80CFDFB39F7C80E2784F",
		"0CD932A31519F31A24ACB8895A9D369BC1BD7A513AB6836F965BAA67ED976DB2F0509A5639BEB55FD37510C345B9D0EA",
		"88016F5D559144BE23211BC49AC0B6B1057CBAA9F8CC745089311A7674F9A22C563E037A9AE6EB07F96A616F05D29755",
		"0DDA1B5692FA19EBB16F115BC9E125A152E1E4E317A002FBF9C89B1F19FC27C1480EA1AF7C53F9D96B1E21BC426DA2DA",
		"039A1AD4E5DCC6F1E701042611908E60A30A9A31D3498999DD775AE289C26A097EE214414AD4673753600BFA97F04DFE",
		"8C8913EFCD05D94D9B85D1351929CAAB5C46120775FE8572680F0FCADFE7E0CAA953B772288E7725C4C34AABF3ED6578",
		"00686491E0AD582E9CE288A99154C3302837362C287E513962A50E1079186EFA7BF01094D932ADBC6BC35D01AF201E59",
		"15F1C077D3FC7705994F08D0E485F2972EB290447EC5C258C71060A2AD6DE8E29C689EABE93B610A893F9556E3AD2A14",
		"0AD7EEE2FEE314774F5CF261E5D1F6B86921B5A0C6FA006A61A73F1AD8AC65D07E2306E94F6BA63E0F5834A691705EB6",
		"94F96371DA3159CB87E7C7ECBF3D0C055332A62DA26D0573902C4B0E9240AAE034D2F25BED0149004CF222C6A8936553",
		"95500784DF788C041FF82C166AD6F9FEE78E33873C0EA27711370BCD8C64777D4A667275656337D3069F244BC27299DE",
		"8EA7F15450773927983D09E967369CC5004D569E3C1EA916AEAD6545653FAB7D1DC33D0109F65A22936E712128F13459",
		"17E58F9EC5EA74F55D77CEEE5A04D40F6DBB20F68104A2ECC5EC2B5CC2D466665362880C5B52FA313E52CE44BEDC261F",
		"10BB90D14A2B29EEFB53A1E21EEA0FBC67F06FBE7CF6A07FCC70C522F7F82D39C6CEEAA0F41EE5FA8150BC385A1D258E",
		"118519002189B1F75A0E97D190F140CECE80F9BE2801A71A5405795203883335D8B1BAEA1FE1C96A30365F2A612BF741",
		"079502BE3ECD976C9A7B781633DE2D80C889A42A48CFBE77E32132F54AFE930B5F4A4F0AF65B9F858879A164FDCC7889",
		"8E7ED370E4FAF8B676774D896B4AA993223EE7A4F8C58C130C36471D468AF26E235F820AA206A7FC2AF7E6D372E67C58",
		"19408039A3E625C6421D6D36121FC48B86B6E25069F4090178F771D04E5F572235C8B16F2E3B0575232BAADBFC400533",
		"836EE776C3EE01BF2BC7690574E43B856C97F8B5CD60E3BB64EE1F1C262D5FD16E37B770C6E34B868A1F8B63C9D21A08",
		"0B9C83C2E70DCBD5A033ED7F7FE85DBE9A603653BE9E2D8A3883924476BD80241530AFC8CE4EE0A1D0100CD85C01633C",
		"914AD88C7DE7CCC600C6BE401B199B776298D453B32A807A29EBFA0CFE201B1BA1E633F9CC08CDEC1D5BC225D7B7C74C",
		"100C9312A036A38E882D8EB7FD056FC204A81A90DDB99D88A08A262F1D322E009FA87145D8B4EC650F122F4E9CB5FB31",
		"059E6609B29239A2056FE33A57D7A6748AA0D579EC71A8B71A55ECA2BACAA0E833AED4FA4A4FE27904A99314DAFB13FA",
		"95B0CDE4A7C2D75E023CA1FC41498ECF1D8DA9B590DA09AF871BA7943AE70E9EA13BE6123B0325ED6EC66A6FAA8720FE",
		"0E90C2C8B6A9C6BA8D2F1710B95C62575B10762CAB5009B10A32869377FB0F28248D8077B5AA0D73A99487C4BE88334E",
		"0EBB5B7E37A0931B0960862F5483C69AD15037AF2FA64824B7111F067309E7733384DD896F30635C2CD4104897671D9E",
		"9951F79B20AE9E00C0CAADBEA8A7411BEABDA003C38A31295689EBBBF3E1096509E39D5B28D9BAB2EE338EABBA93B744",
		"86510E4FBB7891E75775D47CA971EB61B649A91A70805A604106D878C88CA78B14DE96C0CAFB276F3F436E8111AA6EAA",
		"9336FC51E4F2BDF97136198993B88D7F4657C70C147164547DC2545CBFA5B821412DBD54103DB5DA7323E34531516562",
		"8B2CCD1E53F0E8A9156E7170B9FD54253B66174D5048800711E3827457ED3D96C290A4D4069CEC53D1B3F833172D4298",
		"910723D1DB93BA561C36688BEBA46081F74CB649AD59CF22F4290E11211065612360C2DDAB558D22ADD8A21213E477F6",
		"823FFC6DD5C947997D207819B282EE6F0CAA08E862D66D7C1FD71E0370E259DC8A596C03CFE33CF8EB2063B1B7406578",
		"09B4D00DA1F36686E29FE0EADA310B965284369A92F034C087336A19D9B06E3D5E1624D9C599D5643CB629829A0C305F",
		"197148C3AEA41F0C53C7D2898DCF8F02B41714F7F173D1F2EF1AB01D3D958CAE39FD504C725B96AAB3A165B442D41184",
		"11AA199ADD6DC878B59C8DED93B256FB6337F5D33E7DCFAE805C40251085BB6C4ED63C6AE394BEEDB08C2D195D2F18C0",
		"13FBCBF6875534C3474BDAE521584AE131A13A4BA010CCBB219698115C49E03CF49288E40F2E83B02BAC27A7C8280102",
		"0D3847F41642D577D91BEE798FC4CCF5FD2EDC249B89E1D580D9926D3A238EE714435535F4E416F4AC82CBD31C38BF75",
		"97A13E9C8E142A74BFEF7247DA111A4F3CFBE8ADE8855BC2D03ACDF98D24E51CCCD8A7DC101A088342FD8D0765FA8259",
		"95A4864FFA0D99D7B497CEB6200D19F61329D638929626D9818889EEFEF213C9043627995A0FCD816289403ADBCE33DE",
		"18A23859822A7F4C50822EF857BD2E3BD4159E6B622B42BF2DE0565223695D45D3F09305FF0098A10156CA6E27817A9F",
		"127E3B4A015013EF46C4175D76D72E73C1BA280ECC50802C518C3E2CFA5BEAC9D4745E45088B382DA353D036EF609511",
		"842BF7D628B459623ED4E988F25135555CC554D0AC41EEEF57E47AB053660EB83F84D2BC7B60B32A65D8C8E732735E03",
		"96566A6670B532E569BB143A37698ECA329586D1B0458CD6B55A1A27CCD0E004656B49393AD2B6AFE17285DEA16DBE41",
		"0711157DEC8ACF6EDBE5DAC1F087CEFA0A4BE16E90389AA1C4A719485A9D1F5521EC5C3E2B51C9D5B6941AB8466D4604",
		"83B01040681CAD80A7A0AABE206D3C015421715510ADD43F52D6CE7445C5D2306FF5C84448E85505E89E8EDDEF16437A",
		"94BD1699866E5135EE8BA1A3A23D0D2FC12A168B11D74A3F449F6435407FBED91AE786D8F8F6ECDBE1CF520CED9CEFB6",
		"07DBAB9BB561E43208ACF4C13008DE79A45FA3DB2D512C73E24EF69E28C27629FA624DB0491C92BC7E392798AB12D3F8",
		"8269B08C83144A525269902BF9A18C283864A575B1CDEFA3A1D7781B95BD6264FC9EF77D47ACFB7AFED720A45406956A",
		"8733790497CED6544FDF7B61A5D83BE02C4A746BDD9F80C8073C6DB3366E3F446F385CB0FCF888F72BAFF020D410C670",
		"8130EE084B2698C729E1921DC7CBC02E104E6F42BFBA95BEA0F06ADD063AB5F3C5E19995B8C81122749304501A9D8F2E",
		"917480A17BCF511E6BAA1DA10E3073FABE00AD7AFE3025B52A74F08B57C1B7FF158443D73BF74DF77F4B7DD69501756C",
		"83C236BC2C2619F04A9FD75B44F34445C4BCDEA866BD13048E3B289984C17A19265F89F4ED1A3E6DBB3CE04A47C82B08",
		"8172EE2885ABD83A8D9EB98530A758FA91EBEE642A52304A877CD65A47F9B71FD6F1125FEB1FCF0654C9746923525F3B",
		"09CC23778AB300570BA0416543095A77E42DDC03DE7615A4E9ADB99EC238131D0E77FF10E168EE6FA4B7A130578CD903",
		"85812EEFF68BB6170B5F49F6F03A7FED1711383680043EF1C3D65B7D47D92018BC9036F1260FE0169BB37D20E1B8F584",
		"0E91489CF835FDC6C528F9498F7EFFB2FAB68616A182058731674B953354F460DD2B8A3D5CCCF4D55B57F60D5DDE8EF1",
		"0CAFABD87748DD263474B6B96FA0643BF192D1E7DAFF3E9F11F4D22381D63BFE9495E02EB3BA642EE9891091D3EE5A88",
		"88A6DDB294C6FE104ECC9EE2B95628B591953B38BA1AFB75FED72E85482B4751B5BE6558EEB7791ADB39CD218C10A4AC",
		"05BE9A85126EFB0392854A4647AF133A7FEF11E79D5B34DE6F083EC469FB1CC2E3BFF8A4844A29EECD3699266553D173",
		"88D780EC9C40F3205E40C9F7050FB861608C44D35790C5AF5BDBEC3F3FD889C383D6E8F9B14D287EED6F8E9889F82D80",
		"931818D2016063E458EF87DD7476E2BA7FCC815B2AF70BCB698C5DC23E89A0275E495BC116DEACE59BB4F2E3D1342787",
		"11F0C8795C311B2B9ABB958776EFAD714D7A4F3A7151A43A2563368CB40B67590145D55FB61A8141D514AF897E2EAE66",
		"9391E9B47BB31587116484F7F96B0ABE96CDF137E6895BF0FE1827B8F791BA5D772385799D547D0D088ED430E4C56471",
		"15059DF38397B582BB2542E0A9551112563C4E27B7810C6E7173D75C011833027708AE77A06C5679B045149E4BD9101D",
		"8E25E66E33D49C8DB4C5339278B4A416C9BF109F7E00D3DD3545E02BEA385D6E55925750406713A672A717F5F9CE0BB5",
		"0EC792088E3475CF1410F593D75EE4111C9B29DCB620A96FFEE4E51D5AABDAD39926ABFF29FB32D177BDC3E5A36EB144",
		"0F82D1D742EF97B435051FDB3FA97FCC9A243C7F928B6BBEA96243029D641C1264AE3411938E84D2F9CB0E97B2A55E31",
		"13B0659A8A9999DA28EB9533EF608B8AD5B40AA47D6A0061F1AD06B443F63F82D6D446AD8E4AD2B67AC436621EF1EE15",
		"991C4091FA197676FF99715F16A4A92606730BF28DC20524BF79268DE83E7F487A0DF732C77F26167DF592A8909B0D03",
		"890FFC3E67E8B12A0A73494D93F3022C320E760479DED505635210EA73BD83A3AC8DF0B4CA76691E27971D8446EEABE8",
		"195F59324768E2F6ABEBECD179259901BBA26F9822FEDC690A1E4BBF9B646F70B4604A62B16FB0A7AA4B614035C131D4",
		"129D23BE982B226BC75496F23AEE09E4CA4F092753E0AE1712937F6A4340E816EE009A276A5EE15D6D5A563310F3D4BC",
		"89B60C797AD6D7ADFDCBBE3B87B7F19C9AB620731C75641EC62AFD0EB5717B2BD064294B6E2B539731D137BB6CEA28D9",
		"851C8538F6900680D258A26EE0554A6E23F76F190A3DDA5E75318BAD2B3971137E0B2EEB20FB9957C91C7C6CA21693DC",
		"03583C75E42E558390D118815804908FC523FE29199B6B06382D9E9E6745E542AD473C87744CE4206B5DA104181647C0",
		"8BB4BD324345894DEEA4F7F067F8558DAADF7CEC9F11757F5CBA56C1ABB28741145097296CD175AA23D6EAF5DC36B2E4",
	}
	var err error
	for i, proTxHashString := range proTxHashesStrings {
		proTxHashesBytes[i], err = hex.DecodeString(proTxHashString)
		require.NoError(t, err, "should be able to decode proTxHash")
	}
	for i, signatureString := range signatureStrings {
		signatureBytes[i], err = base64.StdEncoding.DecodeString(signatureString)
		require.NoError(t, err, "should be able to decode signature")
	}
	for i, publicKeyString := range publicKeyStrings {
		publicKeyBytes[i], err = hex.DecodeString(publicKeyString)
		require.NoError(t, err, "should be able to decode publicKey")
	}
	thresholdSignature, err := bls12381.RecoverThresholdSignatureFromShares(signatureBytes, proTxHashesBytes)
	require.NoError(t, err, "should be able to recover threshold signature")

	// expectedThresholdSignature, err := base64.StdEncoding.DecodeString("lAFnjEd9eXEI3NWVc65fUOICPEYatEOER5P7NYrDT2EdD5CnqB+bjizBu8TOEA8FAlz7DWx/kQrW8yagJOmfznkUbRfx6puL3GXcIey8NJjZJkoWmmS2QdneRX0ec5D4")
	// require.EqualValues(t, expectedThresholdSignature, thresholdSignature, "should have the correct threshold signature")

	thresholdPublicKeyBytes, err := hex.DecodeString("12FC1DE564A9F98FE0B043BC76E93B15CC91439690848364F84BAEF1155079C6D7FE7DD1050F44AFD19E28E138E58BED")
	require.NoError(t, err, "should be able to decode thresholdPublicKeyBytes")
	thresholdPublicKey := bls12381.PubKey(thresholdPublicKeyBytes)
	msg, err := hex.DecodeString("c9b30a2519a019ec7527e42975cbf6bbf1006a1898243230ccf5e65fbc2ede2e")
	require.NoError(t, err, "should be able to decode msg")
	result := thresholdPublicKey.VerifySignatureDigest(msg, thresholdSignature)
	require.True(t, result, "signature should be verified")
}

func TestAggregationDiffMessages(t *testing.T) {
	privKey := bls12381.GenPrivKey()
	pubKey := privKey.PubKey()
	msg1 := crypto.CRandBytes(128)
	msg2 := crypto.CRandBytes(128)
	msg3 := crypto.CRandBytes(128)
	sig1, err := privKey.Sign(msg1)
	require.Nil(t, err)
	sig2, err := privKey.Sign(msg2)
	require.Nil(t, err)
	sig3, err := privKey.Sign(msg3)
	require.Nil(t, err)

	// Test the signature
	assert.True(t, pubKey.VerifySignature(msg1, sig1))
	assert.True(t, pubKey.VerifySignature(msg2, sig2))
	assert.True(t, pubKey.VerifySignature(msg3, sig3))

	var signatures [][]byte
	var wrongSignatures [][]byte
	var messages [][]byte
	var wrongMessages [][]byte
	signatures = append(signatures, sig1)
	signatures = append(signatures, sig2)
	wrongSignatures = append(wrongSignatures, sig1)
	wrongSignatures = append(wrongSignatures, sig3)
	messages = append(messages, msg1)
	messages = append(messages, msg2)
	wrongMessages = append(wrongMessages, msg1)
	wrongMessages = append(wrongMessages, msg3)

	aggregateSignature, err := pubKey.AggregateSignatures(signatures, messages)
	require.Nil(t, err)
	wrongAggregateSignature, err := pubKey.AggregateSignatures(wrongSignatures, messages)
	require.Nil(t, err)

	assert.True(t, pubKey.VerifyAggregateSignature(messages, aggregateSignature))
	assert.False(t, pubKey.VerifyAggregateSignature(wrongMessages, aggregateSignature))
	assert.False(t, pubKey.VerifyAggregateSignature(messages, wrongAggregateSignature))
}
